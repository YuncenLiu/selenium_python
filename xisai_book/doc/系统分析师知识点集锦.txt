
['第1章', '第一章', '计算机基础']
1.1 一、计算机系统概述
已学习
1.计算机系统的多层次结构
硬联逻辑级：这是计算机的内核，由门、触发器等逻辑电路组成。
微程序级：这一级的机器语言是微指令集，程序员用微指令编写的微程序一般直接由硬件执行。
传统机器级：这一级的机器语言是该机的指令集，程序员用机器指令编写的程序可以由微程序进行解释。
操作系统级：从操作系统的基本功能来看，一方面它要直接管理传统机器中的软硬件资源，另一方面它又是传统机器的延伸。
汇编语言级：这一级的机器语言是汇编语言，完成汇编语言翻译的程序称为汇编程序。
高级语言级：这一级的机器语言就是各种高级语言，通常用编译程序来完成高级语言翻译的工作。
应用语言级：这一级是为了使计算机满足某种用途而专门设计的，因此，这一级的机器语言就是各种面向问题的应用语言。
2.存储系统
2.1层次化存储体系

https://img.ixueyi.net/images/px_vc/2024-06/178/Z9HPr85NxC.png
局部性原理是层次化存储结构的支撑
时间局部性：指程序中的某条指令一旦执行，不久以后该指令可能再次执行，典型原因是由于程序中存在着大量的循环操作。
空间局部性：指一旦程序访问了某个存储单元，不久以后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址可能集中在一定的范围内，其典型情况是程序顺序执行。
工作集理论：工作集是进程运行时被频繁访问的页面集合。
2.2Cache
（1）Cache的相关概念：
Cache的功能：提高CPU数据输入输出的速率，突破冯·诺依曼瓶颈，即CPU与存储系统间数据传送带宽限制。
在计算机的存储系统体系中，Cache是除寄存器以外，访问速度最快的层次。
使用Cache改善系统性能的依据是程序的局部性原理。
Cache对程序员来说是透明的。
（2）Cache映像方式【直接由硬件完成地址映像】
直接相联映像：硬件电路较简单，但冲突率很高。
全相联映像：电路难于设计和实现，只适用于小容量的cache，冲突率较低。
组相联映像：直接相联与全相联的折中。
（3）平均存取时间
如果以h代表对Cache的访问命中率，（1-h）称为失效率（未命中率），t1表示Cache的周期时间，t2表示主存储器周期时间，以读操作为例，使用“Cache+主存储器”的系统的平均周期为t3，则：t3 = h×t1+(1-h)×t2
（4）Cache页面淘汰算法
随机算法（RAND）
先进先出算法（FIFO）
近期最少使用算法（LRU）-----年龄计数器
最不经常使用页置换算法（LFU）-----算法计数器位数多，实现困难。
（5）Cache的读写过程
写直达：同时写Cache与内存
写回：只写Cache，淘汰页面时，写回内存
标记法：只写入内存，并将标志位清0，若用到此数据，需要再次调取
2.3磁盘管理
（1）存取时间=寻道时间+等待时间，寻道时间是指磁头移动到磁道所需的时间；等待时间为等待读写的扇区转到磁头下方所用的时间。
（2）读取磁盘数据的时间应包括以下三个部分：找磁道的时间、找块（扇区）的时间，即旋转延迟时间、传输时间。
（3）磁盘调度算法：先来先服务FCFS（谁先申请先服务谁）；最短寻道时间优先SSTF（申请时判断与磁头当前位置的距离，谁短先服务谁）；扫描算法SCAN（电梯算法，双向扫描）；循环扫描CSCAN（单向扫描）。
2.4磁盘阵列（RAID，Redundant Arrays of Independent Disk）
Raid0（条块化）：性能最高，并行处理，无冗余，损坏无法恢复。
Raid1（镜像结构）：可用性、可修复性好，仅有50%利用率。
Raid0+1（Raid10）：Raid0与Raid1长处的结合，高效也可靠。
Raid3（奇偶校验并行传送）：N+1模式，有固定的校验盘，坏一个盘可恢复。
Raid5（分布式奇偶校验的独立磁盘）：N+1模式，无固定的校验盘，坏一个盘可恢复。RAID5磁盘利用率为（n-1）/n，具备容错功能。
Raid6（两种存储的奇偶校验）：N+2模式，无固定的校验盘，坏两个盘可恢复。
注：RAID0磁盘利用率为100%，访问速度最快；RAID1磁盘利用率为50%，具备纠错功能；现在企业采用RAID0与RAID1结合的方式比较多。
2.5 I/O数据传输控制方式
（1）程序控制（查询）方式：分为无条件传送和程序查询方式两种。方法简单，硬件开销小，但I/O能力不高，严重影响CPU的利用率。
（2）程序中断方式：与程序控制方式相比，中断方式因为CPU无需等待而提高了传输请求的响应速度。
（3）DMA方式：DMA方式是为了在主存与外设之间实现高速、批量数据交换而设置的。DMA方式比程序控制方式与中断方式都高效。
（4）通道方式
（5）I/O处理机
2.6总线系统
（1）总线基本概念
总线是一组能为多个部件分时共享的信息传送线，用来连接多个部件并为之提供信息交换通路。（总线通常是半双工的）
（2）总线的特点
挂接在总线上的多个部件只能分时向总线发送数据，但可同时从总线接收数据。
通过总线复用方式可以减少总线中信号线的数量，以较少的信号线传输更多的信息。
（3）总线的分类
从功能上来对总线进行划分数据总线【传数据】、地址总线【传地址】和控制总线【传控制信号】。
从数据传输方式的角度划分为并行总线和串行总线

1.2 二、计算机体系结构
开始学习
1.计算机体系结构分类（Flynn分类法）

https://img.ixueyi.net/images/px_vc/2024-06/60/Ry576WbDJc.png
2.CISC与RISC

https://img.ixueyi.net/images/px_vc/2024-06/969/KBhBH6XRSW.png
寻址方式：立即寻址、直接寻址、间接寻址、寄存器寻址、寄存器间接寻址
复杂指令集计算机（CISC，Complex Instruction Set Computers）
精简指令集计算机（RISC，Reduced Instruction Set Computers
3.流水线
相关参数计算（流水线执行时间计算、流水线吞吐率、流水线加速比）
（1）流水线周期：执行时间最长的一段
（2）流水线执行时间（理论公式）：(t1+t2+…+tk)+(n-1)* tmax
（3）流水线执行时间（实践公式）：k*tmax +(n-1)* tmax
（4）流水线吞吐率：TP=指令条数/流水线执行时间
（5）流水线最大吞吐率

https://img.ixueyi.net/images/px_vc/2024-06/283/SVbm4EayzN.png
（6）流水线加速比：不使用流水线执行时间/使用流水线执行时间
（7）单双缓冲区
单缓冲区：在单缓冲情况下，每当用户进程发出一个I/O请求时，OS便在主存中为之分配一个缓冲区。在块设备输入时，假定从磁盘把一块数据输入到缓冲区的时间为T，OS将该缓冲区中的数据传送到用户区的时间为M，而CPU对这一块数据的处理时间为C。（假定T执行时间最长，M次之，C时间最少。）

https://img.ixueyi.net/images/px_vc/2024-06/590/DB3ppqkTzy.png
这三个步骤中，有两个步骤是需要用到缓冲区的，这两个步骤执行时，缓冲区都不可以开始下一个磁盘区的处理工作，所以三个步骤可合并为两个：数据读入缓冲区并送至用户区、处理。此时，可应用流水线的方式来提升效率。假设用户需要将大小为N个磁盘块的File1文件逐块从磁盘读入缓冲区，并送至用户区进行处理，那么采用单缓冲区需要花费的时间为：（T+M+C）+(N-1)(T+M) 。
双缓冲区：
由于缓冲区是共享资源，生产者与消费者在使用缓冲区时必须互斥。
如果消费者尚未取走缓冲区的数据，生产者又生产新的数据，也无法将它送入缓冲区，所以设置两个缓冲区。

https://img.ixueyi.net/images/px_vc/2024-06/760/CV4dR4dnST.png
因为是双缓冲区，那么“数据读入缓冲区”完成后，就可以同时开始处理“由缓冲区送至用户区”和“盘块读入缓冲区”，此时可以视同3段流水线，所以缓冲区到用户是可以和其他两段并行的。假设用户需要将大小为N个磁盘块的File1文件逐块从磁盘读入缓冲区，并送至用户区进行处理，那么采用双缓冲区需要花费的时间为：（T+M+C）+(N-1)*T。

1.3 三、系统配置与性能评价
开始学习
1.性能指标
（1）平均每条指令的平均时钟周期个数（CPI，Clock Per Instruction）
（2）每（时钟）周期运行指令条数（IPC，Instruction Per Clock）
（3）百万条指令每秒（MIPS，Million Instructions Per Second），MIPS = 指令条数/（执行时间×106）= 主频/CPI = 主频×IPC
（4）每秒百万个浮点操作（MFLOPS，Million Floating-point Operations Per Second），MFLOPS = 浮点操作次数/（执行时间×106）
（5）响应时间（RT，Response Time）
（6）主频 = 外频 * 倍频
（7）计算机系统的性能一般包括两个大的方面。
一方面是它的可靠性或可用性，也就是计算机系统能够正常工作的时间，其指标可以是能够持续工作的时间长度（例如，平均无故障时间），也可以是一段时间内，能正常工作的时间所占的百分比；
另一方面是它的处理能力或效率，这又可以分为三类指标，第一类指标是吞吐率（例如，系统在单位时间内能够处理正常作业的个数），第二类是响应时间（从系统得到输入到给出输出之间的时间），第三类指标是资源利用率，即在给定的时间区间中，各种部件（包括硬件设备和软件系统）被使用的时间与整个时间之比。
2.性能评价方法
2.1时钟频率法
以时钟频率高低衡量速度。
2.2指令执行速度法
表示机器运算速度的单位是MIPS。
2.3等效指令速度法（Gibson mix，吉普森混合法）
通过各类指令在程序中所占的比例（Wi）进行计算得到的。特点：考虑指令比例不同的问题。
2.4数据处理速率法（PDR）
PDR值的方法来衡量机器性能，PDR值越大，机器性能越好。PDR = L/R    特点：考虑CPU+存储
2.5综合理论性能法（CTP）
CTP用MTOPS（Million Theoretical Operations Per Second，每秒百万次理论运算）表示。CTP的估算方法是，首先算出处理部件每个计算单元的有效计算率，再按不同字长加以调整，得出该计算单元的理论性能，所有组成该处理部件的计算单元的理论性能之和即为CTP。
2.6基准程序法
把应用程序中用得最多、最频繁的那部分核心程序作为评估计算机系统性能的标准程序，称为基准测试程序（benchmark）。基准程序法是目前一致承认的测试系统性能的较好方法。
【测试精确度排名】真实的程序->核心程序->小型基准程序->合成基准程序
（1）Dhrystone基准程序：它是一个综合性的整数基准测试程序，是为了测试编译器和CPU处理整数指令和控制功能的有效性，人为地选择一些典型指令综合起来形成的测试程序。
（2）Linpack基准程序：它是国际上最流行的用于测试高性能计算机系统浮点性能的测试。
（3）Whetstone基准程序：它是用Fortran语言编写的综合性测试程序，主要由执行浮点运算、功能调用、数组变址、条件转移和超越函数的程序组成。
（4）SPEC基准程序：一种是测试计算机完成单项任务有多快，称为速度测试；另一种是测试计算机在一定时间内能完成多少项任务，称为吞吐率测试。
（5）TPC基准程序：TPC（Transaction Processing Council，事务处理委员会）基准程序用以评测计算机在事务处理、数据库处理、企业管理与决策支持系统等方面的性能。该基准程序的评测结果用每秒完成的事务处理数TPC来表示。
TPC-A基准程序规范用于评价在OLTP环境下的数据库和硬件的性能；
TPC-B测试的是不包括网络的纯事务处理量，用于模拟企业计算环境；
TPC-C测试的是联机订货系统；
TPC-D、TPC-H和TPC-R测试的都是决策支持系统，其中TPC-R允许有附加的优化选项；
TPC-E测试的是大型企业信息服务系统。
TPC-W是基于Web应用的基准程序，用来测试一些通过Internet进行市场服务和销售的商业行为，所以TPC-W可以看作是一个服务器的测试标准。

1.4 四、可靠性
开始学习
1.可靠性计算
（1）串联系统计算： R=R1×R2×...×Rn
（2）并联系统计算：R=1-(1-R1)×(1-R2)×...×(1-Rn)
（3）N模混联系统：先将整个系统划分为多个部分串联R1、R2…等，再计算R1、R2内部的并联可靠性，代入原公式。
2.可靠性指标

https://img.ixueyi.net/images/px_vc/2024-06/779/6RHQDkE6GV.png
在实际应用中，一般MTTR很小，所以通常认为MTBF≈MTTF。
平均无故障时间  →  (MTTF) MTTF=1/λ，λ为失效率
平均故障修复时间  →  (MTTR) MTTR=1/μ，μ为修复率
平均故障间隔时间  →  (MTBF) MTBF = MTTR + MTTF
可靠性可以用MTTF/（1+MTTF）来度量。
可用性可以用MTBF/（1+MTBF）来度量。
可维护性可以用1/（1+MTTR）来度量。
注：MTBF大，MTTR小表示系统具有高可靠性和高可用性。

['第2章', '第二章', '操作系统']
2.1 一、进程管理
开始学习
1.进程与线程
进程的2个基本属性：可拥有资源的独立单位；可独立调度和分配资源的基本单位。
线程作为调度和分配的基本单位。
同一个进程当中的各个线程，可以共享该进程的各种资源，如内存地址空间、代码、数据、文件等，线程之间的通信与交流非常方便。（程序计数器、寄存器和栈不能共享）
2.信号量与PV操作
（1）相关概念：互斥、同步、临界资源、临界区、信号量。
互斥：如千军万马过独木桥，同类资源的竞争关系。（资源上的制约，间接制约）
同步：速度有差异，在一定情况停下等待，进程间的协作关系。（工序上的制约，直接制约）
临界资源：诸进程间需要互斥方式对其进行共享的资源，如打印机、磁带机等。
临界区：每个进程中访问临界资源的那段代码称为临界区。
信号量：是一种特殊的变量。当信号量小于0时，还可以表示排队进程数。
（2）PV操作对应的过程（如下图所示）：

https://img.ixueyi.net/images/px_vc/2024-06/207/KNjzCFFxw0.png
3.前趋图
（1）前趋图表示：→（起点，终点）可以此形式表示前趋图中所有箭线，1个箭头表示1个前趋关系。
（2）针对箭线标注信号量，箭线的起点位置是V操作（即前趋活动完成后以V操作通知后继活动）；箭线的终点位置是P操作（即后继活动开始前以P操作检查前趋活动是否完成）。前趋图与PV操作结合，根据前趋图箭线标注信号量，再根据进程图填空。
4.死锁及银行家算法
所谓死锁，是指两个以上的进程互相都要求对方已经占有的资源导致无法继续运行下去的现象。
（1）死锁的四大条件：互斥；保持和等待；不剥夺；环路等待。
（2）根据题干给出的进程和资源分配，判断形成死锁的最小资源数或其他参数：对于这种情况，分配资源时每个进程得到可以完成进程的资源数减一，此时是形成死锁的最差情况，在此情况下多1个资源即可解决死锁问题，即不可能形成死锁。假设m个进程各自需要w个R资源，系统中共有n个R资源，此时不可能形成死锁的条件是：
m*(w-1)+1<=n。
（3）银行家算法：判断系统当前剩余资源数；判断各个进程当前仍需资源数；当前执行进程仍需资源数超过系统剩余资源则死锁，不超过则执行该进程；执行进程后释放该进程所有资源（当前系统剩余资源数为：系统前期剩余资源+当前进程前期已分配资源）。
根据银行家算法判断相关进程序列是否会形成死锁，是则为不安全序列，能够正常执行所有进程则为安全序列。
5.进程的状态

https://img.ixueyi.net/images/px_vc/2024-06/600/CjyGzQZbk6.png
运行：当一个进程在CPU上运行时。（单处理机处于运行态的进程只有一个，多进程在CPU上交替运行）
就绪：一个进程获得了除CPU外的一切所需资源，一旦得到处理机即可运行。
阻塞：阻塞也称等待或睡眠状态，一个进程正在等待某一事件发生（例如请求I/O、等待I/O完成等）而暂时停止运行，此时即使把CPU分配给进程也无法运行，故称进程处于阻塞状态。

2.2 二、存储管理
开始学习
1.内存管理
内存管理功能：内存空间的分配与回收；配合硬件进行地址转换（逻辑地址转物理地址）；内存空间的共享与保护；当内存不足时，借助外存解决内存不够用的问题。
分区存储管理：
2.段页式存储
（1）页式存储：将程序与内存均划分为同样大小的块，以页为单位将程序调入内存。
优点：利用率高，碎片小，分配及管理简单
缺点：增加了系统开销；可能产生抖动现象
（2）段式存储：按用户作业中的自然段来划分逻辑空间，然后调入内存，段的长度可以不一样。
优点：多道程序共享内存，各段程序修改互不影响
缺点：内存利用率低，内存碎片浪费大
（3）段页式存储：段式与页式的综合体。先分段，再分页。1个程序有若干个段，每个段中可以有若干页，每个页的大小相同，但每个段的大小不同。
优点：空间浪费小、存储共享容易、存储保护容易、能动态连接
缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降
3.页面置换算法
页面淘汰时，主要依据原则：先淘汰最近未被访问的（访问位为0），其次淘汰未被修改的（即修改位为0，因为修改后的页面淘汰时代价更大）。

2.3 三、文件管理
开始学习
1.索引文件

https://img.ixueyi.net/images/px_vc/2024-06/998/wgMaNvpsf7.png
（1）索引结点对应的索引方式一般题干会给出，没有给出的默认按照如图所示方式理解，下面的文件大小依图给出计算过程。
（2）根据物理块大小（假设1KB）和地址项长度（假设4B），可以计算存放间接索引的物理块可以存放的地址项个数：物理块大小/地址项长度，向下取整（1KB/4B=256，注意单位和进制转换）。
（3）直接索引（即索引结点直接指向实际存储文件的物理块），能够表示的逻辑页号范围是0-9，能够表示的文件大小是10*1KB。【访问1次对应磁盘找到数据】
（4）一级间接索引（即索引结点指向的物理块存放的是一级间接索引表的地址项，共256个，可以指向256个实际存储文件的物理块），能够表示的逻辑页号范围是10-265，能够表示的文件大小是256*1KB。【访问2次对应磁盘找到数据】
（5）二级间接索引（即索引结点指向的物理块存放的是二级间接索引表的地址项，共256个，可以指向256个一级间接索引表地址项的物理块，每个物理块指向实际存储文件的地址项有256个，最终指向的物理块共有256*256个），能够表示的逻辑页号范围是266-65801，能够表示的文件大小是65536KB。【访问3次对应磁盘找到数据】
2.位示图
（1）对于位示图，每一个bit位可以表示一个磁盘的占用情况，“0”表示空闲，“1”表示占用。
（2）对于字的长度与具体机器字长有关，由题目指定，假设机器字长16位，则每个字可以表示16个磁盘块的占用情况；
（3）指定序号为n或第n+1个磁盘，占用情况需要用m=(n+1)/16（向上取整）个字表示，字的序号为m-1。注意其中磁盘序号、字的序号、对应位号一般都是从0开始，计算过程中会有加1或减1处理。

['第3章', '第三章', '嵌入式系统']
3.1 一、嵌入式基本概念
开始学习
1.基本概念
嵌入式系统是以应用为中心、以计算机技术为基础，并将可配置与可裁剪的软、硬件集成于一体的专用计算机系统【面向特定领域】，需要满足应用对功能、可靠性、成本、体积和功耗等方面的严格要求。
从计算机角度看，嵌入式系统是指嵌入各种设备及应用产品内部的计算机系统。它主要完成信号控制的功能，体积小、结构紧凑，可作为一个部件埋藏于所控制的装置中。
嵌入式系统通常通过外部接口采集相关输入信息或人机接口输入的命令，对输入数据进行加工和计算，并将计算结果通过外部接口输出，以控制受控对象。
2.嵌入式系统软件组成架构
一般嵌入式系统由嵌入式处理器、相关支撑硬件、嵌入式操作系统、支撑软件以及应用软件组成。
嵌入式系统初始化过程：片级初始化→板级初始化→系统级初始化

3.2 二、嵌入式微处理器体系结构
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/926/YAYWedFTk3.png
嵌入式微处理器主要用于处理相关任务。由于嵌入式系统通常都在室外使用，可能处于不同环境，因此选择处理器芯片时，也要根据不同使用环境选择不同级别的芯片。其主要因素是芯片可适应的工作环境温度。通常，我们把芯片分为民用级、工业级和军用级。
民用级器件的工作温度范围：0~70℃
工业级器件的工作温度范围：-40~85℃
军用级器件的工作温度范围：-55~150℃
当然，除了环境温度外，环境湿度、震动、加速度等也是应考虑的因素。

3.3 三、嵌入式系统软件
开始学习
1.基本概念
嵌入式系统具有以下特点：
2.嵌入式系统软件分类
根据系统对时间的敏感程度可将嵌入式系统划分为：
（1）嵌入式系统
（2）嵌入式实时系统：强实时系统、弱实时系统等。
从安全性要求看，嵌入式系统还可分为：
（1）安全攸关系统（2）非安全攸关系统

3.4 四、嵌入式操作系统
开始学习
1.嵌入式操作系统特点
嵌入式操作系统具有一般操作系统的功能，同时具有嵌入式软件的特点，主要有：
2.嵌入式实时操作系统
按照系统对响应时间的敏感程度，可以分为：
如分时操作系统，基于公平性原则，各进程分享处理器，获得大致相同的运行时间。
3.嵌入式实时操作系统实时性的评价指标
中断响应和延迟时间
任务切换时间
信号量混洗时间
系统响应时间
4.嵌入式实时操作系统调度算法
时间片轮转调度算法：为每个任务提供确定份额的CPU执行时间。
优先级调度算法：静态-系统为每个任务分配一个相对固定的优先顺序。动态-优先级可以动态改变。
抢占式优先级调度算法：任何时候运行的任务都是所有就绪任务中具有最高优先级的任务。大多数RTOS调度算法都是抢占方式（可剥夺方式）。
单调速率调度算法（RMS算法） ：是一种静态优先级调度算法，是经典的周期性任务调度算法。RMS的基本思路是任务的优先级与它的周期表现为单调函数的关系，任务的周期越短，优先级越高；任务的周期越长，优先级越低。
最早截止期调度算法（EDF算法）：根据任务的截止时间来确定其优先级，对于时间期限最近的任务，分配最高的优先级。
最低松弛度优先（LLF）算法：根据任务紧急（或松弛）的程度，来确定任务的优先级。任务的紧急程度愈高，为该任务所赋予的优先级就愈高，使之优先执行。
5.嵌入式操作系统的分类
（1）内核是操作系统的核心部分，它管理着系统的各种资源。内核可以看成连接应用程序和硬件的一座桥梁，是直接运行在硬件上的最基础的软件实体。
目前从内核架构来划分，可分为宏内核（Monolithic Kernel）和微内核（Micro Kernel）
（2）微内核操作系统
现代操作系统大多拥有两种工作状态，分别是核心态和用户态。一般应用程序工作在用户态，而内核模块和最基本的操作系统核心工作在核心态。
将传统的操作系统代码放置到更高层，从操作系统中去掉尽可能多的东西，而只留下最小的核心，称之为微内核。（C/S结构）

https://img.ixueyi.net/images/px_vc/2024-06/124/d6z4RcC5kU.png
操作系统的内核服务：异常和中断、计时器、I/O管理等。
微内核与单体内核对比：

https://img.ixueyi.net/images/px_vc/2024-06/572/RePcK87ABd.png
6.多核操作系统
（1）多核操作系统设计的核心技术：核结构、Cache设计、核间通信、任务调度、中断处理同步互斥等。
（2）对于多核CPU，优化操作系统任务调度算法是保证效率的关键。一般任务调度算法有全局队列调度和局部队列调度。
全局队列调度：指操作系统维护一个全局的任务等待队列，当系统中有一个CPU核心空闲时，操作系统就从全局任务等待队列中选取就绪任务开始在此核心上执行。这种方法的优点是CPU核心利用率较高。
局部队列调度：指操作系统为每个CPU内核维护一个局部的任务等待队列，当系统中有一个CPU内核空闲时，便从该核心的任务等待队列中选取恰当的任务执行，这种方法的优点是任务基本上无需在多个CPU核心间切换，有利于提高CPU核心局部Cache命中率。目前多数多核CPU操作系统采用的是基于全局队列的任务调度算法。

3.5 五、嵌入式设计与开发
开始学习
1.嵌入式软件开发与传统软件开发方法的差异
嵌入式软件的开发也与传统的软件开发方法存在比较大的差异，主要表现在以下方面：
生成二进制代码后，需要使用工具卸载到目标机或固化在目标机储存器上运行。
更强调软/硬件协同工作的效率和稳定性。
开发的结果通常需要固化在目标系统的储存器或处理器内部储存器资源中。
一般需要专门的开发工具、目标系统和测试设备。
嵌入式软件对实时性、安全性和可靠性的要求较高。
嵌入式软件开发是要充分考虑代码规模。
在安全攸关系统中的嵌入式软件，其开发还应满足某些领域对设计和代码审定。
模块化设计，即将一个较大的程序按功能划分成若干程序模块，每个模块实现特定的功能。
2.低功耗设计

https://img.ixueyi.net/images/px_vc/2024-06/104/L8CYhPDEv7.png
['第4章', '第四章', '数据库系统']
4.1 一、数据库体系结构
开始学习
1.数据库模式
（1）三级模式：外模式对应视图，模式（也称为概念模式）对应数据库表，内模式对应物理文件。
（2）两层映像：外模式-模式映像，模式-内模式映像；两层映像可以保证数据库中的数据具有较高的逻辑独立性和物理独立性。
（3）逻辑独立性：数据的逻辑结构发生变化后，用户程序也可以不修改。但是为了保证应用程序能够正确执行，需要修改外模式和概念模式之间的映像。
（4）物理独立性：当数据的物理结构发生改变时，应用程序不用改变。但是为了保证应用程序能够正确执行，需要修改概念模式和内模式之间的映像。
2.分布式数据库
（1）分布式数据库特点
数据独立性。除了数据的逻辑独立性与物理独立性外，还有数据分布独立性（分布透明性）。
集中与自治共享结合的控制结构。各局部的DBMS可以独立地管理局部数据库，具有自治的功能。同时，系统又设有集中控制机制，协调各局部DBMS的工作，执行全局应用。
适当增加数据冗余度。在不同的场地存储同一数据的多个副本，可以提高系统的可靠性和可用性，同时也能提高系统性能。（提高系统的可用性，即当系统中某个结点发生故障时，因为数据有其他副本在非故障场地上，对其他所有场地来说，数据仍然是可用的，从而保证数据的完备性。
全局的一致性、可串行性和可恢复性。
（2）透明性分类
分片透明性：用户不必关心数据分不分片，怎么分片（水平分片：按记录分；垂直分片：按字段分；混合分片）
位置透明性：用户不必关心数据存放在何处
逻辑透明（局部映像透明）：用户不必关心局部DBMS支持哪种数据模型、使用哪种语言
复制透明：用户不必关心各个结点数据的复制与同步更新

4.2 二、数据库设计过程
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/276/kQVHcxQfQ1.png
1.概念结构设计

https://img.ixueyi.net/images/px_vc/2024-06/726/Fd7g6bqxRX.png
（1）集成的方法：
（2）集成产生的冲突及解决办法：
（3）E-R模型:

https://img.ixueyi.net/images/px_vc/2024-06/730/6HydKqH25Q.png
两个不同实体集之间联系：
一对一（1：1）
一对多（1：n）
多对多（m：n）
2.逻辑结构设计

https://img.ixueyi.net/images/px_vc/2024-06/590/WpzJgq2pyL.png
（1）E-R图向关系模式的转换：
（2）关系模式的规范化
（3）确定完整性约束（保证数据的正确性）
（4）用户视图的确定（提高数据的安全性和独立性）
（5）应用程序设计
（6）数据模型三要素：数据结构、数据操作、数据的约束条件。

4.3 三、关系代数
开始学习
1.并（结果为二者元组之和去除重复行）
2.交（结果为二者重复行）
3.差（前者去除二者重复行）
以元组行作为整体进行判断，类似于集合运算。
4.笛卡尔积
结果列数为二者属性列数之和，行数为二者元组行数的乘积。
两个表做笛卡尔积，结果表的元组由前表与后表的元组拼接而成，不同的排列组合形成不同的结果元组。
5.投影（筛选符合条件的属性列）
6.选择（筛选符合条件的元组）
属性名可以依次标序号，直接以数字形式出现在表达式中。
7.自然连接
结果列数为二者属性列数之和减去重复列，行数为二者同名属性列其值相同的结果元组。笛卡尔积、选择、投影的组合表示可以与自然连接等价。
普通连接的条件会写出，没有写出则表示为自然连接。

4.4 四、规范化理论
开始学习
1.非规范化存在的问题
规范化过程是为了解决数据冗余、删除异常、插入异常、更新异常（修改操作一致性问题）等问题。
数据冗余：重复存储数据较多，浪费存储空间。
更新异常（引起修改操作的不一致性）：若不注意，会使一些数据被修改，另一些数据未被修改，导致数据修改的不一致性。
插入异常：未提供主键，当主键为空时，不能进行插入操作。
删除异常：删除部分信息时会删除整条记录，找不到原记录。
2.规范化
（1）函数依赖

https://img.ixueyi.net/images/px_vc/2024-06/266/ffCzC3AS5v.png
（2）Armstrong公理
关系模式R <U，F >有以下的推理规则：
A1.自反律（Reflexivity）：若Y⊆X⊆U，则X →Y成立。
A2.增广律（Augmentation）：若Z⊆U且X→Y，则XZ→YZ成立。
A3.传递律（Transitivity）：若X→Y且Y→Z，则X→Z成立。
根据A1，A2，A3这三条推理规则可以得到下面三条推理规则：
合并规则：由X→Y，X→Z，有X→YZ。 （A2，A3）
伪传递规则：由X→Y，WY→Z，有XW→Z。 （A2，A3）
分解规则：由X→Y及Z⊆Y，有X→Z。 （A1，A3）
（3）键与属性
候选键（候选码）是能够唯一标识元组却无冗余的属性组合，可以有多种不同的候选键，在其中任选一个作为主键。候选键的求取可以利用图示法找入度为0的属性集合，并在此基础上进行扩展，最终找到能够遍历全图的最小属性组合作为候选键，对于入度为0在关系依赖集中可以理解为从未在箭线右侧出现。
组成候选码的属性就是主属性，其他为非主属性。
外键是其他关系模式的主键。
【解题技巧：判断主键和外键】
找主键：使用图示法找主键。
找外键：外键是其它关系模式的主键。
全码：关系模型的所有属性组是这个关系模式的候选码，称为全码。
完整性约束相关：了解主键、外键相关的概念，根据题干，做出相关判断。
（4）范式：规范化是为了解决数据冗余、删除异常、插入异常、更新异常等问题。
第一范式（1NF）：在关系模式R中，当且仅当所有域只包含原子值，即每个属性都是不可再分的数据项，则称关系模式R是第一范式。
第二范式（2NF）：当且仅当关系模式R是第一范式（1NF），且每一个非主属性完全依赖候选键（没有不完全依赖）时，则称关系模式R是第二范式。
第三范式（3NF）：当且仅当关系模式R是第二范式（2NF），且R中没有非主属性传递依赖于候选键时，则称关系模式R是第三范式。
BC范式（BCNF）：设R是一个关系模式，F是它的依赖集，当且仅当其F中每个依赖的决定因素必定包含R的某个候选码时，R属于BCNF。【当且仅当关系模式R是第三范式（3NF）】
第四范式（4NF）：关系模式 R(U，F)满足 1NF，X、Y 是Ｕ的非空子集，Z=U-X-Y 也非空，若任取一组值对(x，z)，都可决定一组 y 值，且此决定与 z 值无关，就称 Y 多值依赖于 X，记做 X→→Y。关系模式 R 满足 1NF，若对任一多值依赖X→→Y，X 必包含 R的候选键，称 R 满足 4NF。
3.模式分解
规范化过程-拆表即分解关系模式。
（1）无损分解
无损联接分解：指将一个关系模式分解成若干个关系模式后，通过自然连接和投影等运算仍能还原到原来的关系模式。
【公式法】
定理：如果R的分解为ρ＝{ R1，R2 }，F为R所满足的函数依赖集合，分解ρ具有无损联接性的充分必要条件是：
R1∩R2→（ R1－R2 ）或 R1∩R2→（ R2－R1 ）
（2）保持函数依赖
设数据库模式ρ={R1，R2，…，Rk}是关系模式R的一个分解，F是R上的函数依赖集，ρ中每个模式Ri上的FD集是Fi。如果{F1，F2，…，Fk}与F是等价的（即相互逻辑蕴涵），那么称分解ρ保持FD。

4.5 五、数据控制
开始学习
1.数据控制功能
①安全性（security）；
②完整性（integrality）；
③并发控制（concurrency control）；
④故障恢复（recovery from failure）
2.数据安全性控制
安全性（security）是指保护数据库不受恶意访问，即防止不合法的使用所造成的数据泄漏、更改或破坏。这样，用户只能按规定对数据进行处理，例如，划分了不同的权限，有的用户只能有读数据的权限，有的用户有修改数据的权限，用户只能在规定的权限范围内操纵数据库。

https://img.ixueyi.net/images/px_vc/2024-06/805/hkeGxZFCr7.png
3.数据完整性控制
完整性（integrality）是指数据库正确性和相容性，是防止合法用户使用数据库时向数据库加入不符合语义的数据。保证数据库中数据是正确的，避免非法的更新。
4.并发控制
并发控制（concurrency control）是指在多用户共享的系统中，许多用户可能同时对同一数据进行操作。DBMS的并发控制子系统负责协调并发事务的执行，保证数据库的完整性不受破坏，避免用户得到不正确的数据。
（1）事务的特性（ACID）
原子性（Atomicity）是指事务包含的所有操作要么全部成功，要么全部失败回滚。这些操作是一个整体，不能部分地完成。
一致性（Consistency）是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。
隔离性（Isolation）是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的。
持久性（Durability，永久性）是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，无论发生何种故障，都不应对其有任何影响。
（2）并发产生的问题

https://img.ixueyi.net/images/px_vc/2024-06/33/8ed2HANSf6.png
（3）锁的分类
（4）封锁协议
一级封锁协议。事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放。可防止丢失修改

https://img.ixueyi.net/images/px_vc/2024-06/115/VqrdM3wNYE.png
二级封锁协议。一级封锁协议加上事务T在读取数据R之前先对其加S锁，读完后即可释放S锁。可防止丢失修改，还可防止读“脏”数据

https://img.ixueyi.net/images/px_vc/2024-06/611/caCFBYe9d9.png
三级封锁协议。一级封锁协议加上事务T在读取数据R之前先对其加S锁，直到事务结束才释放。可防止丢失修改、防止读“脏”数据与防止数据（不可）重复读

https://img.ixueyi.net/images/px_vc/2024-06/326/5fgsAcPYA3.png
两段锁协议。可串行化的。可能发生死锁
5.故障恢复
故障恢复（recovery from failure）。数据库中的4类故障是事务内部故障、系统故障、介质故障及计算机病毒。故障恢复主要是指恢复数据库本身，即在故障引起数据库当前状态不一致后，将数据库恢复到某个正确状态或一致状态。恢复的原理非常简单，就是要建立冗余（redundancy）数据。
（1）冷备份也称为静态备份，是将数据库正常关闭，在停止状态下，将数据库的文件全部备份（复制）下来。
（2）热备份也称为动态备份，是利用备份软件，在数据库正常运行的状态下，将数据库中的数据文件备份出来。
（3）完全备份：备份所有数据
（4）差量备份：仅备份上一次完全备份之后变化的数据
（5）增量备份：备份上一次备份之后变化的数据
（6）日志文件 ：事务日志是针对数据库改变所做的记录，它可以记录针对数据库的任何操作，并将记录结果保存在独立的文件中。
（7）数据库故障与恢复

https://img.ixueyi.net/images/px_vc/2024-06/566/VTD9gZnJNU.png
撤销事务（UNDO）：故障发生时未完成的事务，放入Undo撤销。
重做事务（REDO）：故障发生前已提交的事务，放入Redo重做。
（8）两阶段提交协议2PC
2PC事务提交的两个阶段：
两条全局提交规则：
两阶段提交协议对故障的恢复：
参与者进程
协调者

4.6 六、NoSQL
开始学习
1.概念
NoSQL（Not-only SQL）：不仅仅只是SQL，泛指非关系型的数据库。
2.与关系数据库对比

https://img.ixueyi.net/images/px_vc/2024-06/696/YzumTMQRW4.png
3.分类

https://img.ixueyi.net/images/px_vc/2024-06/762/WhmqHhcsQ3.png
4.7 七、反规范化
开始学习
1.概念
由于规范化会使表不断的拆分，从而导致数据表过多。这样虽然减少了数据冗余，提高了增、删、改的速度但会增加查询的工作量。系统需要进行多次连接，才能进行查询操作，使得系统的效率大大的下降。
2.技术手段
增加冗余列是指在多个表中具有相同的列，它常用来在查询时避免连接操作。
增加派生列指增加的列来自其它表中的数据，由它们计算生成。
重新组表指如果许多用户需要查看两个表连接出来的结果数据，则把这两个表重新组成一个表来减少连接而提高性能。
分割表：水平分割与垂直分割。水平分割，有些记录常要查询，有些记录不常用，如历史记录。垂直分割，把主码与某些常用的字段组成一个表，把主码与另一些字段组成另一个表。
3.优缺点
反规范化的优点：连接操作少，检索快、统计快；需要查的表减少，检索容易。

https://img.ixueyi.net/images/px_vc/2024-06/47/N68dBSqVVq.png
4.8 八、数据库视图、索引与数据库分区
开始学习
1.数据库索引
提升查询效率，降低添加、修改、删除效率。采用B树，B+树等。
2.视图
（1）数据库视图
它一个虚拟表（逻辑上的表），其内容由查询定义（仅保存SQL查询语句）。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并没有真正存储这些数据，而是通过查询原始表动态生成所需要的数据。
（2）视图的优点
视图能简化用户操作
视图使用户能以多种角度看待同一数据
视图对重构数据库提供了一定程度的逻辑独立性
视图可以对机密数据提供安全保护
（3）物化视图
它不是传统意义上虚拟视图，是实体化视图，其本身会存储数据。同时当原始表中的数据更新时，物化视图也会更新。
3.分区分表

https://img.ixueyi.net/images/px_vc/2024-06/798/9waenx7fhp.png
分区的优点：
（1）相对于单个文件系统或是硬盘，分区可以存储更多的数据。
（2）数据管理比较方便，比如要清理或废弃某年的数据，就可以直接删除该日期的分区数据即可。
（3）精准定位分区查询数据，不需要全表扫描查询，大大提高数据检索效率。
（4）可跨多个分区磁盘查询，来提高查询的吞吐量。
（5）在涉及聚合函数查询时，可以很容易进行数据的合并。
分区的常见方式：

https://img.ixueyi.net/images/px_vc/2024-06/504/ujhn6Fk328.png
4.9 九、数据库性能优化
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/738/GCCMqCcwz1.png
['第5章', '第五章', '计算机网络']
5.1 一、OSI/RM七层协议
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/546/pQjfvUYtp1.png
IP报文首部由以下部分组成：
（1）版本号、首部长度、区分服务（旧版本中叫服务类型）、总长度
（2）标识、标志、片偏移
（3）生存时间（避免无限转发）、协议、首部校验
（4）源IP、目标IP

5.2 二、TCP/IP协议簇
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/818/YB6pvtY5jy.png
1.常见协议介绍
TCP与UDP均支持对具体指定端口号进行通信。但连接管理、差错校验、重传等能力只有TCP具备。
TCP：可靠的传输层协议
UDP：不可靠的传输层协议
DHCP：67端口，IP地址自动分配
SNMP：161端口，简单网络管理协议
ICMP：因特网控制协议，PING命令来自该协议
IGMP：组播协议
Telnet：23端口，远程协议。（不安全，SSH是安全的远程协议）
HTTP：80端口，超文本传输协议，网页传输
DNS：53端口，域名解析协议，记录域名与IP的映射关系
ARP：地址解析协议，IP地址转换为MAC地址
RARP：反向地址解析协议，MAC地址转IP地址
FTP：20数据端口/21控制端口，文件传输协议
POP3：110端口，邮件收取
SMTP：25端口，邮件发送
IMAP和POP3的区别是：POP3协议允许电子邮件客户端下载服务器上的邮件，但是在客户端的操作（如移动邮件、标记已读等），不会反馈到服务器上，比如通过客户端收取了邮箱中的3封邮件并移动到其他文件夹，邮箱服务器上的这些邮件是没有同时被移动的。而IMAP客户端的操作都会反馈到服务器上，对邮件进行的操作，服务器上的邮件也会做相应的动作。
MIME是多用途互联网邮件扩展标准，与邮件安全无关。MIME/S与邮件安全相关。
2.DNS

https://img.ixueyi.net/images/px_vc/2024-06/166/zbhdrXr96C.png
（1）查询方式
递归查询：服务器必须回答目标IP与域名的映射关系。
迭代查询：服务器收到一次迭代查询回复一次结果，这个结果不一定是目标IP与域名的映射关系，也可以是其它DNS服务器的地址。
（2）在Linux系统中，DNS配置文件resolv.conf的关键字主要有四个，分别是：
nameserver：定义DNS服务器的IP地址
domain：定义本地域名
search：定义域名的搜索列表
sortlist：对返回的域名进行排序

5.3 三、网络规划与设计
开始学习
1.网络规划和设计的过程

https://img.ixueyi.net/images/px_vc/2024-06/198/3RtbFsHujX.png
2.逻辑网络设计
逻辑网络设计是体现网络设计核心思想的关键阶段，在这一阶段根据需求规范和通信规范，选择一种比较适宜的网络逻辑结构，并基于该逻辑结构实施后续的资源分配规划、安全规划等内容。
逻辑网络设计工作主要包括以下内容：（1）网络结构的设计；（2）物理层技术的选择；（3）局域网技术的选择与应用（4）广域网技术的选择与应用；（5）地址设计和命名模型；（6）路由选择协议；（7）网络管理；（8）网络安全设计；（9）逻辑网络设计文档
利用需求分析和现有网络体系分析的结果来设计逻辑网络结构，最后得到一份逻辑网络设计文档。
逻辑网络设计输出内容：逻辑网络设计图；IP地址方案；安全管理方案；具体的软/硬件、广域网连接设备和基本的网络服务；招聘和培训网络员工的具体说明；对软/硬件费用、服务提供费用、员工和培训的费用初步估计
3.物理网络设计
物理网络设计是对逻辑网络设计的物理实现，通过对设备的具体物理分布、运行环境等确定，确保网络的物理连接符合逻辑连接的要求。在这一阶段，网络设计者需要确定具体的软/硬件、连接设备、布线和服务的部署方案，输出如下内容：
网络物理结构图和布线方案
设备和部件的详细列表清单
软硬件和安装费用的估算
安装日程表，详细说明服务的时间以及期限
安装后的测试计划
用户的培训计划
4.层次化网络设计
核心层：主要是高速数据交换，实现高速数据传输、出口路由，常用冗余机制。
汇聚层：网络访问策略控制、数据包处理和过滤、策略路由、广播域定义、寻址。
接入层：主要是针对用户端，实现用户接入、计费管理、MAC地址认证、MAC地址过滤、收集用户信息。

5.4 四、网络接入技术
开始学习
1.有线接入
公用交换电话网络（PSTN）
数字数据网（DDN）
综合业务数字网（ISDN）
非对称数字用户线路（ADSL）
同轴光纤技术（HFC）
2.无线接入
WiFi（IEEE 802.11）
蓝牙Bluetooth（IEEE 802.15）
红外（IrDA）
WAPI
注：覆盖范围最小的是蓝牙
3.网络划分
局域网（LAN）
城域网（MAN）
广域网（WAN）
因特网（Internet）
无线个人网（WPAN，802.15，Bluetooth）
无线局域网（WLAN，802.11，Wi-Fi）
无线城域网（WMAN，802.16，WiMax）
无线广域网（WWAN，3G/4G）
4.局域网
局域网是指在有限地理范围内将若干计算机通过传输介质互联成的计算机组(即通信网络)，通过网络软件实现计算机之间的文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的。
局域网专用性非常强，具有比较稳定和规范的拓扑结构。常见的局域网拓扑结构有星状结构、树状结构、总线结构和环形结构。

5.5 五、IP子网划分相关计算
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/142/CnpWhSwU5k.png
将一个网络划分成多个子网（取部分主机号当子网号）
例：某公司网络的地址是192.168.192.0/20
IP地址二进制： 1100 0000. 1010 1000.1100 0000.0000 0000
子网掩码二进制：1111 1111. 1111 1111.1111 0000.0000 0000【20位1+12位0】
子网掩码点分十进制： 255. 255. 240. 0
划分成32个子网，需要将主机号位置取出高位5位二进制来表示子网号。即前25位为网络号。此时：
子网掩码二进制：1111 1111. 1111 1111.1111 1111.1000 0000【25位1+7位0】
点分十进制记作：255.255.255.128。
每个子网可分配的主机地址数为：27-2=126。
注：每个子网中，主机号为全0或全1的地址不能使用，所以要减2。

5.6 六、综合布线系统
开始学习
工作区子系统由信息插座、插座盒、连接跳线和适配器组成。
水平子系统由一个工作区的信息插座开始，经水平布置到管理区的内侧配线架的线缆所组成。
管理子系统由交连、互连配线架组成。管理子系统为连接其它子系统提供连接手段。
垂直干线子系统由建筑物内所有的垂直干线多对数电缆及相关支撑硬件组成，以提供设备间总配线架与干线接线间楼层配线架之间的干线路由。
设备间子系统是由设备间中的电缆、连接器和有关的支撑硬件组成，作用是将计算机、PBX、摄像头、监视器等弱电设备互连起来并连接到主配线架上。
建筑群子系统将一个建筑物的电缆延伸到建筑群的另外一些建筑物中的通信设备和装置上，是结构化布线系统的一部分，支持提供楼群之间通信所需的硬件。它由电缆、光缆和入楼处的过流过压电气保护设备等相关硬件组成，常用介质是光缆。

['第6章', '第六章', '数学与经济管理']
6.1 一、数学应用
开始学习
1.图论应用
（1）最小生成树：在连通的带权图的所有生成树中，权值和最小的那棵生成树（包含图中所有顶点的树），称作最小生成树。求带权连通无向图的最小生成树的算法有普里姆（Prim）算法和克鲁斯卡尔（Kruskal）算法。
解题关键：每次找最短边，直到将所有结点连成一棵没有回路的树。
（2）最短路径：带权图的最短路径问题即求两个顶点间长度最短的路径。其中路径长度不是指路径上边数的总和，而是指路径上各边的权值总和。路径长度的具体含义取决于边上权值所代表的意义。
解题关键：从源点出发，计算源点到下一节点的最短路径。后续分析时，每次只考虑当前节点前一个节点的最短路径长度，直到终点位置，分析其最短路径。
（3）网络与最大流量：许多应用包含了流量问题。例如，公路系统中有车辆流，控制系统中有信息流，网络系统中有数据流，金融系统中有现金流等。在实际应用中，很多时候需要寻求最大流量问题。最大流量问题是一个特殊的线性规划问题。
解题关键：每次查找并抽取起点到终点的最大流量路径，直到没有可达路径为止，抽取的流量总和即为最大流量。
2.运筹方法
（1）线性规划
线性规划问题的数学模型通常由线性目标函数、线性约束条件、变量非负条件组成。
线性规划的一些特点：
线性规划的可行解域是由一组线性约束条件形成的，从几何意义来说，就是由一些线性解面围割形成的区域，不一定是封闭的多边形或多面体。
如果存在两个最优解，则连接这两点的线段内所有的点都是最优解，而线段两端延长线上可能会超出可行解区。
增加一个约束条件时，要么缩小可行解域（新的约束条件分割了原来的可行解域），要么可行解域不变（新的约束条件与原来的可行解域不相交）。
如果最优解在可行解域边界某个非顶点处达到，则随着等值域向某个方向移动，目标函数的值会增加或减少（与最优解矛盾）或没有变化（在此段边界上都达到最优解），从而仍会在可行解域的某个顶点处达到最优解。若最优解存在且唯一，则可以从可行解区顶点处比较目标函数值来求解。
线性规划的标准型（standard form of linearprogramrmng）是线性规划模型的标准形式。
其主要特征为：目标函数为极大化类型；所有的约束条件都是等式；所有约束方程右端的常数都是非负的；所有决策变量都是非负的。
（2）动态规划
动态规划是求解决策过程最优化的过程。
解题关键：可通过暴力法/穷举法，将所有方案列举出来，求最优解。也可以通过贪心策略，找到最初方案再进行调整，直到找到最优解。
3.决策
不确定型决策：不确定型决策（非确定型决策）是指决策者对环境情况一无所知，决策者根据自己的主观倾向进行决策。

https://img.ixueyi.net/images/px_vc/2024-06/366/8rwDcg3XaV.png
4.随机函数
假设随机变量s的分布密度函数为f（x）=2x，这意味着，当Δ x充分小时，随机变量s落在区间（x，x+Δx）内的概率约等于f（x）Δx。
r1和r2为计算机逐个产生的、均匀分布在（0，1）区间内的互相独立的伪随机数。
--随机数即约等于密度函数的结果
密度函数为上升趋势，则随机数应该满足上升趋势。
此处采用模拟函数max（r1，r2）随机产生随机数r1和r2。

6.2 二、数学建模
开始学习
1.概念
数学建模是一种数学的思考方法，是运用数学的语言和方法，通过抽象和简化，建立能近似刻画并解决实际问题的模型的一种强有力的数学手段。
2.建模过程
模型准备：了解问题的实际背景，用数学语言来描述问题。
模型假设：根据实际对象的特征和建模的目的，对问题进行必要的简化，并用精确的语言提出一些恰当的假设。
模型建立：在假设的基础上，建立相应的数学结构。
模型求解：利用获取的数据资料，对模型的所有参数做出计算（估计）。
模型分析：对所得的结果进行数学上的分析。
模型检验：将模型分析结果与实际情形进行比较，以此来验证模型的准确性、合理性和适用性。
模型应用：应用方式因问题的性质和建模的目的而异。
3.数学建模方法和思路
（1）直接分析法：认识原理，直接构造出模型。
（2）类比法：根据类似问题模型构造新模型。
（3）数据分析法：大量数据统计分析之后建模。
（4）构想法：对将来可能发生的情况给出设想从而建模。
4.模型分析
模型的合理性分析：最佳、适中、满意等。
模型的误差分析：模型误差、观测误差、截断误差、舍入误差、过失误差、绝对误差、相对误差等。
参数的灵敏性分析：变量数据是否敏感，在最优方案不变的条件下这些变量允许变化的范围。
5.模型检验
利用实际案例数据对模型进行检验
可以请专家来分析模型是否合理
利用计算机来模拟实际问题，再在计算机上检验该数学模型。

['第7章', '第七章', '知识产权与标准化']
7.1 一、保护对象和范围
开始学习
1.知识产权
知识产权是权利人依法就下列客体享有的专有的权利：
（一）作品（著作）；
（二）发明、实用新型、外观设计（专利）；
（三）商标；
（四）地理标志；
（五）商业秘密；
（六）集成电路布图设计；
（七）植物新品种；
（八）法律规定的其他客体。
注：知识产权法属于民法范畴
2.保护对象及范围

https://img.ixueyi.net/images/px_vc/2024-06/647/DJZn5TPBsq.png
3. 使用许可
按照被许可使用权的排他性强弱不同，可以将使用许可分为以下三种：
独占使用许可-仅1个授权对象可用，著作权人不可用
排他使用许可-仅1个授权对象和著作权人可用
普通使用许可-多个授权对象和著作权人可用

7.2 二、保护期限
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/621/jdkvTf8ALL.png

7.3 三、知识产权人确定
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/867/FbE4YsXDFg.png

7.4 四、侵权判断
开始学习
1.专利权
对下列各项，不授予专利权：
（一）科学发现；
（二）智力活动的规则和方法；
（三）疾病的诊断和治疗方法；
（四）动物和植物品种；
（五）用原子核变换方法获得的物质；
（六）对平面印刷品的图案、色彩或者二者的结合作出的主要起标识作用的设计。
对前款第（四）项所列产品的生产方法，可以依照本法规定授予专利权。
注意：算法可以申请专利。
2.著作权
（1）中国公民、法人或者其他组织的作品，不论是否发表，都享有著作权。
（2）知识产权具有地域性的特征，按照一国法律获得承认和保护的知识产权，只能在该国发生法律效力，即知识产权受地域限制，只有在一定地域内知识产权才具有独占性（专用性）。
（3）开发软件所用的思想、处理过程、操作方法或者数学概念不受保护。
（4）软件作品并不是指代码，而是指带有特定业务逻辑的程序以及软件文档。
（5）著作权法不适用于下列情形：

https://img.ixueyi.net/images/px_vc/2024-06/430/UrqvbCkHT0.png
注：合理使用不需要通知作者也不需要付报酬，此时原作品仍然受著作权法保护的。
7.5 五、标准化
开始学习
1.标准的分类
国际标准：ISO、IEC等国际标准化组织
国家标准：GB—中国、ANSI—美国、BS—英国、JIS—日本
区域标准：又称为地区标准，如PASC—太平洋地区标准会议、CEN—欧洲标准委员会、ASAC—亚洲标准咨询委员会、ARSO—非洲地区标准化组织
行业标准：GJB—中国军用标准、MIT-S—美国军用标准、IEEE—美国电气电子工程师协会
地方标准：国家的地方一级行政机构制定的标准
企业标准
项目规范
2.标准的编号
国际、国外标准代号：标准代号+专业类号+顺序号+年代号
我国国家标准代号：强制性标准代号为GB、推荐性标准代号为GB/T
指导性标准代号为GB/Z、实物标准代号GSB
行业标准代号：由汉语拼音大写字母组成（如电子行业为SJ）
地方标准代号：由DB加上省级行政区划代码的前两位
企业标准代号：由Q加上企业代号组成

['第8章', '第八章', '项目管理']
8.1 一、范围管理
开始学习
1.概念
范围管理：确定项目的边界，即哪些工作是项目应该做的，哪些工作不应该包括在项目中。
2.流程
范围管理的流程包括：范围计划编制、范围定义、创建WBS、范围确认、范围控制
3.范围定义的输入
项目章程、项目范围管理计划、批准的变更申请、组织过程资产。
4.WBS的作用
便于估算，明确范围，防止需求蔓延。最底层是工作包。

8.2 二、时间管理
开始学习
1.概念
时间管理：也叫进度管理，就是采用科学的方法，确定进度目标，编制进度计划和资源供应计划，进行进度控制，在与质量、成本目标协调的基础上，实现工期目标。
2.流程
时间管理的流程包括：活动定义、活动排序、活动资源估算、活动历时估算、制定进度计划、进度控制。
3.三点估算法公式
（乐观时间+4*最可能时间+悲观时间）/6
4.进度控制
（1）需要判断的关键点：
第一步：判断延误活动是否为关键活动，若为关键活动，则需要【加快进度】。
第二步：若延误活动不是关键活动，则判断【偏差是否大于总时差】，大于，则【加快进度】。
第三步：偏差不大于总时差时，进一步判断偏差是否大于自由时差，若大于自由时差，先不调整计划，但要加强监管。
（2）【加快进度】的手段
赶工：增加资源，加班，加人。
快速跟进：活动并行执行。
5.进度网络图-关键路径法（PERT）
关键路径法是在制订进度计划时使用的一种进度网络分析技术。关键路线法沿着项目进度网络路线进行正向与反向分析，从而计算出所有计划活动理论上的最早开始与完成日期、最迟开始与完成日期，不考虑任何资源限制。
如下图：单代号网络图

https://img.ixueyi.net/images/px_vc/2024-06/19/Ncz9MQN7mZ.png
ES：最早开始时间 = 所有紧前活动最早结束时间的最大值。
EF：最早完成时间 = 最早开始时间 + 持续时间 。
LS：最迟开始时间 = 最迟完成时间 – 持续时间 。
LF：最迟完成时间 = 所有紧后活动最迟开始时间的最小值。
总时差（松弛时间）：在不延误总工期的前提下，该活动的机动时间。活动的总时差等于该活动最迟完成时间与最早完成时间之差，或该活动最迟开始时间与最早开始时间之差。
6.Gantt图

https://img.ixueyi.net/images/px_vc/2024-06/883/cdHpEtNVK5.png
（1）优点：甘特图直观、简单、容易制作，便于理解，能很清晰地标识出每一项任务的起始与结束时间，一般适用比较简单的小型项目，可用于WBS的任何层次、进度控制、资源优化、编制资源和费用计划。
（2）缺点：不能系统地表达一个项目所包含的各项工作之间的复杂关系，难以进行定量的计算和分析，以及计划的优化等。
（3）与PERT图对比
PERT图以网络图为基础，能表达活动间复杂逻辑关系。
Gantt图简单直观，但不能表达活动间的复杂逻辑关系。
PERT图主要描述不同任务之间的依赖关系；Gantt图主要描述不同任务之间的重叠关系。

8.3 三、成本管理
开始学习
1.概念
成本管理：在整个项目的实施过程中，为确保项目在批准的预算条件下尽可能保质按期完成，而对所需的各个过程进行管理与控制。
2.流程
成本管理的流程包括：成本估算、成本预算、成本控制
3.成本估算方法

8.4 四、质量管理 – 质量保证与质量控制
开始学习
1.质量保证
质量保证一般是每隔一定时间（例如，每个阶段末）进行的，主要通过系统的质量审计和过程分析来保证项目的质量。独特工具包括：质量审计和过程分析。
2.质量控制
质量控制是实时监控项目的具体结果，以判断它们是否符合相关质量标准，制订有效方案，以消除产生质量问题的原因。
3.质量保证与质量控制
一定时间内质量控制的结果也是质量保证的质量审计对象。质量保证的成果又可以指导下一阶段的质量工作，包括质量控制和质量改进。

8.5 五、软件过程改进CMMI
开始学习
（1）CMMI分阶段式和连续式，两者本质内容是一样的。
（2）CMMI体系文件四层：顶层方针 -> 过程文件 -> 规程文件 -> 模板类文件
（3）CMMI中各级别需要注意的核心特点：

https://img.ixueyi.net/images/px_vc/2024-06/287/jRjHgfDX6A.png
8.6 六、数据管理能力成熟度评估模型DCMM
开始学习
DCMM定义了数据战略、数据治理、数据架构、数据应用、数据安全、数据质量、数据标准和数据生存周期等8个核心能力域，细分为28个过程域和445条能力等级标准，将企业数据管理能力成熟度划分为五个等级，自低向高依次为：初始级（1级）、受管理级（2级）、稳健级（3级）、量化管理级（4级）和优化级（5级）。

https://img.ixueyi.net/images/px_vc/2024-06/152/jjPmjPGyJ1.png
8.7 七、软件配置管理
开始学习
1.配置项
（1）基线配置项与非基线配置项：
基线配置项（可交付成果）：需求文档、设计文档、源代码、可执行代码测试用例、运行软件所需数据等
非基线配置项：各类计划（如项目管理计划，进度管理计划）、各类报告
（2）配置状态报告
配置状态报告的目的及时准确地给出配置项的当前状况，供相关人员了解。

https://img.ixueyi.net/images/px_vc/2024-06/328/Nr3rD2yeRs.png
2.配置库
（1）开发库（动态库、程序员库、工作库）：保存正在开发的配置实体。
（2）受控库（主库）：管理基线
（3）产品库（静态库、产品库、软件仓库）：最终产品
（4）检查点：指在规定的时间间隔内（如周例会）对项目进行检查，比较实际与计划之间的差异，并根据差异进行调整。
（5）里程碑：完成阶段性工作的标志，不同类型的项目里程碑不同。
（6）基线：基线是一些重要的里程碑，但相关交付成果要通过正式评审，并作为后续工作的基准和出发点。基线一旦建立后其变化需要受控制。
3.变更控制过程
（1）书面申请；
（2）评估成本、进度等影响；
（3）交由CCB（变更控制委员会）决策是否变更；
（4）实施变更；
（5）验证变更；
（6）归档。
4.版本控制
草稿状态【0.YZ】、正式发布状态【X.Y】、修改状态【X.YZ】
5.软件工具
按软件过程活动将软件工具分为：
软件开发工具：需求分析工具、设计工具、编码与排错工具。
软件维护工具：版本控制工具（VSS、CVS、SCCS、SVN）、文档分析工具、开发信息库工具、逆向工程工具、再工程工具。
软件管理和软件支持工具：项目管理工具、配置管理工具、软件评价工具等。

8.8 八、项目管理工具
开始学习
（1）能做什么（项目管理相关的工作辅助）：任务调度、成本估算、资源分配、预算跟踪、人时统计、配置控制，确定关键路径、松弛时间、超前时间和滞后时间，生成一定格式的报表和报告。
（2）不能做什么（开发技术相关辅助工作）：不能指导软件设计人员按软件生存周期各个阶段的适用技术进行设计工作。

['第9章', '第九章', '企业信息化战略与实施']
9.1 一、信息和信息化的概念
开始学习
1.信息的定义
维纳（Norbert Wiener）：信息就是信息，既不是物质也不是能量，但信息可转换为物质或能量。
香农（Claude E.Shannon）：信息就是不确定性的减少。
2.信息的特点
真伪性【客观性】：真实是信息的中心价值，不真实的信息价值可能为负。
滞后性：信息是数据加工的结果，因此信息必然落后于数据【加工需要时间】。如路况。
不完全性：客观事实的全部信息是不可能得到的。我们需要正确滤去不重要的信息、失真的信息，抽象出有用的信息。
扩压性：信息和实物不同，它可以扩散也可以压缩。
分享性：信息可以分享，这和物质不同，并且信息分享具有【非零和性】。
动态性：信息随着时间的变化而变化。
层次性：客观世界是分层次的，反映它的信息也是分层次的。
传递性：信息在时间上的传递即是存储；在空间上的传递即是转移或扩散。
3.信息化的概念
信息化是从工业社会到信息社会的演进与变革。
信息化的主体是全体社会成员（政府、企业、团体和个人），时域是一个长期过程，空域是经济和社会的一切领域，手段是先进社会生产工具。

9.2 二、信息化战略体系
开始学习
1.信息化战略体系规划

https://img.ixueyi.net/images/px_vc/2024-06/987/jQUMXa4b5P.png
企业战略规划是用机会和威胁评价现在和未来的环境，用优势和劣势评价企业现状，进而选择和确定企业的总体和长远目标，制定和抉择实现目标的行动方案。
希赛解读：确定企业未来发展的大方向。
信息系统战略规划关注的是如何通过信息系统来支撑业务流程的运作，进而实现企业的关键业务目标，其重点在于对信息系统远景、组成架构、各部分逻辑关系进行规划。
希赛解读：为企业战略开发支撑系统。
信息技术战略规划通常简称为IT战略规划，是在信息系统规划的基础上，对支撑信息系统运行的硬件、软件、支撑环境等进行具体的规划，它更关心技术层面的问题。
希赛解读：为支撑系统运行环境做规划。
信息资源规划是在以上规划的基础上，为开展具体的信息化建设项目而进行的数据需求分析、信息资源标准建立、信息资源整合工作。
希赛解读：数据与标准相关的规划
系统规划是信息系统生命周期的第一个阶段，其任务是对企业的环境、目标及现有系统的状况进行初步调查，根据企业目标和发展战略，确定信息系统的发展战略，对建设新系统的需求做出分析和预测，同时考虑建设新系统所受的各种约束，研究建设新系统的必要性和可能性。
希赛解读：单个项目的立项分析。
2.企业战略与信息化战略集成方法
业务与IT整合（BITA）：重心是找业务与现有IT系统之间的不一致，并给出转变计划。【业务路线】
企业IT架构（EITA）：帮助IT企业建立IT的原则规范、模式和标准。【IT技术路线】
3.信息系统战略规划（ISSP）
信息系统战略规划（Information System Strategic Planning，ISSP）是从企业战略出发，构建企业基本的信息架构，对企业内、外信息资源进行统一规划、管理与应用，利用信息控制企业行为，辅助企业进行决策，帮助企业实现战略目标。
ISSP方法经历了三个主要阶段，各个阶段所使用的方法也不一样。
第一个阶段主要以数据处理为核心，围绕职能部门需求的信息系统规划，主要的方法包括企业系统规划法（BSP）--CU矩阵、关键成功因素法（CSF）和战略集合转化法（SST），此外还有：投资回收法、征费法、零线预算法、阶石法；
第二个阶段主要以企业内部管理信息系统为核心，围绕企业整体需求进行的信息系统规划，主要的方法包括战略数据规划法（SDP）：主题数据库、信息工程法（IE）和战略栅格法（SG）；
第三个阶段的方法在综合考虑企业内外环境的情况下，以集成为核心，围绕企业战略需求进行的信息系统规划，主要的方法包括价值链分析法（VCA）和战略一致性模型（SAM）。
4.信息资源规划IRP
信息资源规划是信息化建设的基础工程，是指对企业生产经营活动所需要的信息，对产生、获取、处理、存储、传输和利用等方面进行全面的规划。
IRP强调将需求分析与系统建模紧密结合起来，需求分析是系统建模的准备，系统建模是用户需求的定型和规范化表达。

https://img.ixueyi.net/images/px_vc/2024-06/249/9vjwbW6Cvu.png

9.3 三、业务流程分析方法
开始学习
1.概念
业务流程分析的目的是了解各个业务流程的过程，明确各个部门之间的业务关系和每个业务处理的意义。
企业业务流程包含三个要素，分别是实体、对象和活动。
2.分析方法
价值链分析法：找出或设计出那些能够使顾客满意，实现顾客价值最大化的业务流程。
客户关系分析法：把CRM用在业务流程的分析上。
供应链分析法：从企业供应链的角度分析企业的业务流程。
基于ERP的分析法：将企业的业务流程看作是一个紧密联接的供应链，将供应商和企业内部的采购、生产、销售，以及客户紧密联系起来，对供应链上的所有环节进行有效管理，实现对企业的动态控制和各种资源的集成和优化。
业务流程重组：通过重新审视企业的价值链，从功能成本的比较分析中，确定企业在哪些环节具有比较优势。
3.业务流程建模
标杆瞄准【“拷贝”优秀企业成功经验】
IDEF【一系列建模、分析和仿真方法的统称】
DEMO【行为角色之间的通信方式】
Petri网【业务流：并行、异步、分布式和随机性】
基于服务的BPM
4.业务流程重组BPR
BPR是对企业的业务流程进行根本性的再思考和彻底性的再设计，从而获得可以用诸如成本、质量、服务和速度等方面的业绩来衡量的显著性的成就。
5.业务流程管理BPM
BPM是一种以规范化的构造端到端的卓越业务流程为中心，以持续的提高组织业务绩效为目的的系统化方法。（使用PDCA循环，持续改进）
P：Plan - 计划    D：Do – 执行    C：Check – 检查    A：Act – 处置

9.4 四、电子政务
开始学习
电子政务主要有3类角色：政府（Government）、企（事）业单位（Business）及公民（Citizen）。如果有第4类就是公务员（Employee）。

https://img.ixueyi.net/images/px_vc/2024-06/183/HbDB46z5WN.png
9.5 五、企业信息化与电子商务
开始学习
1.企业资源计划（ERP）
（1）发展过程

https://img.ixueyi.net/images/px_vc/2024-06/154/9MVPALWGZ2.png
（2）ERP结构
ERP是将企业所有资源（企业三大流：物流、资金链、信息流）进行集成整合，全面一体化管理的管理信息系统。
包括三个方面：生产控制（计划、制造）、物流管理（分销、采购、库存管理）和财务管理（会计核算、财务管理）。这三个系统本身就是一个集成体，它们相互之间有相应的接口，能够很好地整合在一起。
管理思想：他是管理思想的变革。
软件产品：但不是直接买来就用，需要个性化的开发与部署。
管理系统：存在众多的子系统，这些子系统有统一的规划，是互联互通的，便于事前事中监控。
2.客户管理（CRM）
（1）CRM理念：将客户看作资产；客户关怀是中心，CRM的目的是提高收入。CRM的核心思想就是以客户为中心。
（2）CRM的主要模块：
 销售自动化；
 营销自动化；
 客户服务与支持；
 商业智能。
（3）CRM的价值：
提高工作效率，节省开支；
提高客户满意度；
提高客户的忠诚度。
3.供应链管理（SCM）
SCM理念：强强联合，整合与优化“三流”【信息流（需求信息流、供应信息流）、资金流、物流】，打通企业间“信息孤岛”，严格的数据交换标准。将制造商、供应商、分销商、零售商，在计划（策略性）、采购、制造、配送、退货等各方面联系起来。
信息流需要进一步了解其分类：
需求信息流（需方到供方）：如客户订单、生产计划、采购合同等
供应信息流（供方到需方）：如入库单、完工报告单、库存记录、可供销售量、提货发运单等
4.商业智能（BI）
BI=数据仓库+数据挖掘+OLAP，用途：决策分析【分析历史数据预判未来】
（1）数据仓库的特点：面向主题；集成的；相对稳定的（非易失的）；反映历史变化（随着时间变化）。
（2）数据湖：是一个存储企业的各种各样原始数据的大型仓库，其中的数据可供存取、处理、分析及传输。
数据仓库和数据湖的区别：数据仓库仅支持数据分析处理；数据湖既支持数据分析处理，也支持事务处理。

https://img.ixueyi.net/images/px_vc/2024-06/884/5zW5Q6jC3S.png
（3）数据挖掘
数据挖掘是从数据本身出发，挖掘人类所未知的知识内容。
数据挖掘方法分类：
（4）数据治理
数据治理是对数据资产管理行使权力和控制的活动集合。
数据治理模型包括三个框架：范围、促成因素和执行及评估。
数据治理的流程：
5.知识管理
（1）知识分类
显性知识（explicit knowledge）：以文字与数字来表达，以资料、科学法则、特定规格及手册等形式展现者。利于传承、传播。
隐性知识（tacit knowledge）：个人主观的洞察力、直觉与预感等。不利于传承、传播。如：个人经验。
显性知识：规范，系统，结构化，明确
隐性知识：未规范，零星，非正式，未编码，不易保存、传递
（2）知识管理工具
可以把知识管理工具分为知识生成工具、知识编码工具和知识转移工具三大类
知识生成工具：知识获取、知识合成、知识创新
知识编码工具：通过标准形式表现知识
知识转移工具：使知识能在企业内传播和分享
6.企业应用集成
不同维度的集成划分

https://img.ixueyi.net/images/px_vc/2024-06/600/UwTrBhbvd1.png

https://img.ixueyi.net/images/px_vc/2024-06/160/uvWpF4nQ24.png
7.企业门户
企业信息门户（EIP，Enterprise Information Portal）：使员工/合作伙伴/客户/供应商都能够访问企业内部网络和因特网存储的各种自己所需的信息。
企业知识门户（EKP，Enterprise Knowledge Portal）：在企业网站的基础上增加知识性内容。
企业应用门户（EAP，Enterprise Application Portal）：以商业流程和企业应用为核心，把商业流程中功能不同的应用模块通过门户技术集成在一起。
垂直门户：为某一特定的行业服务的，传送的信息只属于人们感兴趣的领域。
8.电子商务分类
电子商务主要有2类角色：企业（Business）及个人（Customer）。
主要了解电子商务的类型：

https://img.ixueyi.net/images/px_vc/2024-06/411/wH6breHtJt.png
9.数字化转型
9.1数字化
（1）数字化是新一代信息技术真正的实现推动整个商业模式的变革，推动产业链的重构，推动改进企业与消费者之间的关系，以及企业与合作伙伴之间的关系。
（2）企业数字化转型的五个发展阶段
初始级（规范级）发展阶段【数码化】：信息的数字化，记录、储存、传输数码化。
单元级（场景级）发展阶段【数量化】：提升单项业务的运行规范性和效率。
流程级（领域级）发展阶段【数字化】：关键业务流程及关键业务与设备设施、软硬件、行为活动等要素间的集成优化。
网络级（平台级）发展阶段【数模化】：组织（企业）级数字化和产业互联网级网络化，实现以数据为驱动的业务模式创新。
生态级发展阶段【数用化】：生态级数字化和泛在物联网级网络化，推动与生态合作伙伴间资源、业务、能力等要素的开放共享和协同合作。
9.2智能制造体系
系统层级
设备层：传感器、仪器仪表、机器、装置等
单元层：企业内处理信息、实现监测和控制物理流程的层级
车间层：面向工厂或车间的生产管理的层级
企业层：面向企业经营管理的层级
协同层：其内部和外部信息互联和共享，实现跨企业间业务协同的层级

['第10章', '第十章', '系统规划']
10.1 一、系统规划的步骤
开始学习
（1）初步调查：根据企业战略目标，分析企业现状以及系统运行状况。
（2）确定系统目标：确定系统的服务范围质量等。
（3）分析子系统的组成：做系统划分并指定子系统功能。
（4）拟定系统的实施方案：分析子系统优先级，确定开发顺序。
（5）进行可行性研究：编写可行性研究报告，召开可行性论证会。
（6）制订系统建设方案：对可行性研究报告提出的各项技术指标进行分析、比较，落实各项假设的前提条件，制订【系统建设方案】，形成【系统设计任务书】作为系统建设的依据。

10.2 二、可行性研究分类
开始学习
经济可行性：成本收益分析，包括建设成本、运行成本和项目建设后可能的经济收益。
技术可行性：技术风险分析，现有的技术能否支持系统目标的实现，现有资源（员工、技术积累、构件库、软硬件条件）是否足以支持项目的实施。
法律可行性【社会可行性】：不能与国家法律或政策相抵触。
用户使用可行性：从信息系统用户的角度评估系统的可行性。

10.3 三、成本效益分析
开始学习
1.成本分类
按照成本性态分类：
从项目管理角度对成本分类：
2.收益分类
有形收益：也称之为经济收益，可以用货币的时间价值、投资回收期、投资回收率等指标进行度量。有形收益又可分为一次性经济收益和非一次性经济收益。
无形收益：也称为不可定量的收益，主要是从性质上、心理上进行衡量，很难直接进行量上的比较。
3.盈亏临界分析
销售额=固定成本+可变成本+税费+利润 （正常情况下）
销售额=固定成本+可变成本+税费 （盈亏平衡时）
4.净现值分析
静态与动态的问题：动态分析考虑货币的时间价值，通常需要考虑折现率。
现值：若n年后能收入F元，那么这些钱现在的价值即限制P为：

https://img.ixueyi.net/images/px_vc/2024-06/95/Ehhx6zESnb.png
其中1/(1+i)n称为折现系数（折现因子）或贴现系数（贴现因子）。
净现值（NPV）是指项目在生命周期内各年的净现金流量按照一定的、相同的折现率折现到初时的现值之和。

https://img.ixueyi.net/images/px_vc/2024-06/334/KD2wetQG6R.png
其中(CI-CO)t为第t年的净现金流量，CI为现金流入，CO为现金流出，i为折现率。
5.投资回收期
投资回收期是指投资回收的期限。分为：静态投资回收期和动态投资回收期。
静态投资回收期（不考虑货币的时间价值因素）
动态投资回收期（考虑资金的时间价值因素）
计算动态投资回收期的实用公式为：
Tp=累计折现值开始出现正值的年份数-1+|上年累计折现值|/当年折现值
投资回收率=1/投资回收期*100%
投资收益率 = 投资回报率
投资收益率=投资收益/投资总额*100%
年均投资收益率=运营期年均净收益/投资总额*100%

['第11章', '第十一章', '软件工程']
11.1 一、信息系统生命周期
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/755/3WNYrVDuQP.png
【产品生命周期】培育期、成长期、成熟期、衰退期和结束期
11.2 二、软件开发方法
开始学习
1.结构化开发方法
用户至上，自顶向下，逐步分解（求解），严格区分工作阶段，每阶段有任务与成果，强调系统开发过程的整体性和全局性，系统开发过程工程化，文档资料标准化。该模型阶段固化，难以适应需求变化，适用于需求明确的场景。
2.原型法开发方法
适用于需求不明确的开发，按功能分-水平原型（界面）、垂直原型（复杂算法），按最终结果分-抛弃式原型、演化式原型。
3.面向对象方法
具有更好的复用性，关键在于建立一个全面、合理、统一的模型，分析、设计、实现三个阶段界限不明确。
4.面向服务的方法
以粗粒度、松散耦合的系统功能为核心，强调系统功能的标准化和构件化，加强了系统的灵活性、可复用性和可演化性。
面向服务方法的三个抽象级别：
操作：位于最底层，对标函数方法这个层次。
服务：代表操作的逻辑分组。
业务流程：为实现特定业务目标而执行的一组长期运行的动作或活动。业务流程的例子有：接纳新员工、出售产品或服务和完成订单。
5.其他软件开发方法
形式化方法：
统一过程方法【UP】
敏捷方法

11.3 三、软件开发模型
开始学习
1.原型模型
典型的原型开发方法模型。适用于【需求不明确的场景】，可以帮助用户明确需求。
2.瀑布模型
瀑布模型是将软件生存周期中的各个活动规定为依线性顺序连接的若干阶段的模型，包括需求分析、设计、编码、运行与维护。
瀑布模型的特点是容易理解，管理成本低，每个阶段都有对应的成果产物，各个阶段有明显的界限划分和顺序要求，一旦发生错误，整个项目推倒重新开始。
适用于需求明确的项目，一般表述为需求明确或二次开发，或者对于数据处理类型的项目
3.增量模型
融合了瀑布模型的基本成分和原型实现的迭代特征，可以有多个可用版本的发布，核心功能往往最先完成，在此基础上，每轮迭代会有新的增量发布，核心功能可以得到充分测试。强调每一个增量均发布一个可操作的产品。
4.螺旋模型
典型特点是引入了风险分析。以原型为基础+瀑布模型，最主要的特点在于加入了风险分析。它是由制定计划、风险分析、实施工程、客户评估这一循环组成的，并且从概念项目开始第一个螺旋。
5.V模型
测试贯穿于始终，测试分阶段，测试计划提前。
6.W模型
测试和开发【并行进行】。
7.喷泉模型
典型的面向对象的模型。特点是迭代、无间隙。会将软件开发划分为多个阶段，但各个阶段无明显界限，并且可以迭代交叉。早期著名的面向对象模型。
8.快速应用开发RAD
概念：RAD是瀑布模型的一个高速变种，适用比传统生命周期快得多的开发方法，它强调极短的开发周期，通常是用基于构件的开发方法获得快速开发。
过程：业务建模，数据建模，过程建模，应用生成，测试与交付
适用性：RAD对模块化要求比较高，如果某项功能不能被模块化，则其构件就会出问题；如果高性能是一个指标，且必须通过调整结构使其适应系统构件才能获得，则RAD也有可能不能奏效；RAD要求开发者和客户必须在很短的时间完成一系列的需求分析，任何一方配合不当都会导致失败；RAD只能用于管理信息系统的开发，不适合技术风险很高的情况。
9.构件组装模型

https://img.ixueyi.net/images/px_vc/2024-06/6/NG2vqz3ydJ.png
10.统一过程（在软考中UP、RUP都指统一过程）
典型特点是用例驱动、以架构为中心、迭代和增量。统一过程把一个项目分为四个不同的阶段：
9个核心工作流：业务建模、需求、分析与设计、实现、测试、部署、配置与变更管理、项目管理、环境。
11.敏捷开发
（1）概念：敏捷开发是一种以人为核心、迭代、循序渐进的开发方法，适用于小团队和小项目，具有小步快跑的思想。常见的敏捷开发方法有极限编程法、水晶法、并列争球法和自适应软件开发方法。
（2）敏捷宣言：
（3）极限编程XP
概念：极限编程XP是一种轻量级的开发方法，常用于一些对费用控制严格的公司中使用，非常有效。
四大价值观：沟通、简单、反馈、勇气
五大原则：快速反馈、简单性假设、逐步修改、提倡更改、优质工作
十二个最佳实践：计划游戏、隐喻、小型发布、简单设计、测试先行、重构、结对编程、集体代码所有制、持续集成、每周工作40小时、现场客户和编码标准。
（4）水晶方法：探索了用最少纪律约束而仍能成功的方法，从而在产出效率与易于运作上达到一种平衡。
（5）开放式源码：程序开发人员在地域上分布很广【其他方法强调集中办公】。
（6）SCRUM：明确定义了的可重复的方法过程。
（7）功用驱动开发方法（FDD）：编程开发人员分成两类：首席程序员和“类”程序员。
（8）ASD方法：其核心是三个非线性的、重叠的开发阶段：猜测、合作与学习。
（9）动态系统开发方法（DSDM）：倡导以业务为核心。

11.4 四、逆向工程
开始学习
1.逆向工程的四个层级：
实现级：包括程序的抽象语法树、符号表、过程的设计表示。
结构级：包括反映程序分量之间相互依赖关系的信息，例如调用图、结构图、程序和数据结构。
功能级：包括反映程序段功能及程序段之间关系的信息，例如数据和控制流模型。
领域级：包括反映程序分量或程序诸实体与应用领域概念之间对应关系的信息，例如实体关系模型。
2.与逆向工程相关的概念
（1）重构（restructuring）。重构是指在同一抽象级别上转换系统描述形式。
（2）设计恢复（design recovery）。设计恢复是指借助工具从已有程序中抽象出有关数据设计、总体结构设计和过程设计等方面的信息。
（3）逆向工程（reverse engineering）。逆向工程是分析程序，力图在比源代码更高抽象层次上建立程序的表示过程，逆向工程是设计的恢复过程。
（4）正向工程（forward engineering）。正向工程是指不仅从现有系统中恢复设计信息，而且使用该信息去改变或重构现有系统，以改善其整体质量。
（5）再工程（re-engineering）。再工程是对现有系统的重新开发过程，包括逆向工程、新需求的考虑过程和正向工程三个步骤。

['第12章', '第十二章', '需求工程']
12.1 一、需求工程概述
开始学习
软件需求是指用户对系统在功能、行为、性能、设计约束等方面的期望。考虑“做什么”，而不考虑“怎么做”，不关注开发平台和程序语言。
【需求开发活动】：需求获取、需求分析、需求定义（产生SRS）、需求验证（形成需求基线【经过评审的SRS 】）。
【需求管理活动】：变更控制、版本控制、需求跟踪、需求状态跟踪。
需求管理是对需求基线进行管理

12.2 二、需求分类
开始学习
1.需求的层次
（1）业务需求：是指反应企业或客户对系统高层次的目标要求，通常来自项目投资人、购买产品的客户、客户单位的管理人员、市场营销部门或产品策划部门等。通过业务需求可以确定项目视图和范围，为以后的开发工作奠定了基础。
（2）用户需求：描述的是用户的具体目标，或用户要求系统必须能完成的任务。也就是说，用户需求描述了用户能使用系统来做些什么。
（3）系统需求：是从系统的角度来说明软件的需求，包括功能需求、非功能需求（性能需求）和设计约束等。功能需求也称为行为需求，它规定了开发人员必须在系统中实现的软件功能，用户利用这些功能来完成任务，满足业务要求。非功能需求是指系统必须具备的属性或品质，又可细分为软件质量属性和其他非功能需求。设计约束也称为限制条件或补充规约，通常是对系统的一些约束说明。
2.QFD
质量功能部署QFD是一种将用户要求转化成软件需求的技术，其目的是最大限度地提升软件工程过程中用户的满意度。QFD将软件需求分为三类：
（1）常规需求（基本需求）：用户认为系统应该做到的功能或性能，实现越多用户会越满意。
（2）期望需求：用户想当然认为系统应具备的功能或性能，但并不能正确描述自己想要得到的这些功能或性能需求。如果期望需求没有得到实现，会让用户感到不满意。
（3）兴奋需求（意外需求）：是用户要求范围外的功能或性能，实现这些需求用户会更高兴，但不实现也不影响其购买的决策。
3.PIECES框架
PIECES框架是系统非功能性需求分类的技术。

https://img.ixueyi.net/images/px_vc/2024-06/53/B26pJhRTZT.png
12.3 三、需求开发
开始学习
1.需求获取方法

https://img.ixueyi.net/images/px_vc/2024-06/55/fy94VLjydM.png
2.需求分析
2.1结构化需求分析（SA）【结构化开发中的需求分析阶段】
2.1.1结构化需求分析过程

https://img.ixueyi.net/images/px_vc/2024-06/767/YuQDTraSu6.png
2.1.2数据流图（DFD）

https://img.ixueyi.net/images/px_vc/2024-06/943/eCSsHq5nUF.png
2.1.3数据流图常见的3种错误
黑洞：一个加工只有输入数据流而无输出数据流。
奇迹：一个加工只有输出数据流而无输入数据流。
灰洞：若一个加工的输入数据流无法通过加工产生输出流。
2.1.4数据流图题答题技巧
（1）详细分析试题说明
（2）利用数据平衡原则
（3）补充实体
实体可能是：
人物角色：如客户、管理员、主管、经理、老师、学生
组织机构：如银行、供应商、募捐机构
外部系统：如银行系统、工资系统、后台数据库（当要开发的是中间件时）
（4）补充存储：存储的文字方面特征：“**文件”“**表”“**库”“**清单”“**档案”
（5）补充数据流
i）数据平衡原则：
ii）按题目说明与图进行匹配
说明中的每一句话，都能与图中有对应关系，当把说明中的实体与数据流标识出来之后，容易缩小对应范围，找出纰漏。
（6）补充加工名
加工是用于处理数据流的，所以要补充加工名，可以把该加工涉及到的数据流，在说明中标识出来，再在数据流名称所在的句子中，找“动词+名词”的结构，分析是否可作为加工。
“动词+名词”如：生成报告、发出通知、批改作业、记录分数，当然这只是普遍情况，也有例外，如物流跟踪、用户管理
（7）数据流图绘制基本原则
 DFD中只用 外部实体、数据流、加工、存储 这四种图形元素，每个元素都有名字。
 每个加工至少有一个输入数据流和一个输出数据流，而且要保持【数据守恒】。
 在DFD中，按层给加工编号（编号表明了该加工处在哪一层，以及上下层的父图与子图的对应关系）。
 规定任何一个DFD子图必须与它上一层的一个加工对应，两者的输入数据流和输出数据流必须一致。此即父图与子图的平衡。
 在整套DFD中，每个数据存储必须既有读的数据流，又有写的数据流。但是在某张子图中，可能只有读没有写，或者只有写没有读。
 可以在DFD中加入物质流，帮助用户理解DFD，但不可夹带控制流。
（8）高质量数据流图绘制原则
 复杂性最小化原则。数据流图分层结构就是把信息划分为小的且相对独立的一大批子集例子，这样就可以单独考察每一个数据流图。如果要了解某个过程更加详细的信息，可以跳转到该过程的下一层；如果要知道一个数据流图如何与其他数据流图相关联，可以跳转到上一层的数据流图进行考察。
 接口最小化原则。接口最小化是复杂性最小化的一种具体规则。在设计模式时，应使得模型中各个元素之间的接口数或连接数最小化。
 数据流一致性原则。一个过程和它的过程分解在数据流内容中是否有差别？是否存在有数据流出但没有相应的数据流入的加工？是否存在有数据流入但没有相应的数据流出的加工？
2.1.5数据字典

https://img.ixueyi.net/images/px_vc/2024-06/87/xRgvkcyuU3.png
2.2面向对象需求分析
2.2.1面向对象基本概念
（1）对象：属性（数据）+方法（操作）+对象ID
（2）类（实体类/控制类/边界类）：
（3）继承与泛化：复用机制，一般和特殊的关系。
继承是一种复用机制，一个类继承有多个父类，称为【多重继承】
（4）封装：隐藏对象的属性和实现细节，仅对外公开接口
（5）多态：不同对象收到同样的消息产生不同的结果
（6）重载：一个类可以有多个同名而参数类型不同的方法
2.2.2UML相关概念
UML（统一建模语言）：平台无关、语言无关。
（1）UML事物分类：
结构事物：最静态的部分，包括：类、接口、协作、用例、活动类、构件和节点。
行为事物：代表时间和空间上的动作，包括：消息、动作次序、连接。
分组事物：看成是个盒子，如：包、构件。
注释事物：UML模型的解释部分。描述、说明和标注模型的元素。
（2）规则：规则是构造块如何放在一起的规定，包括为构造块命名
 范围：给一个名字以特定含义的语境
 可见性：怎样使用或看见名字
 完整性：事物如何正确、一致地相互联系
 执行：运行或模拟动态模型的含义是什么
（3）公共机制
 规格说明：事物语义的细节描述，它是模型真正的核心
 修饰：通过修饰来表达更多的信息
 公共分类：类与对象、接口与实现
 扩展机制：允许添加新的规则
2.2.3UML图分类

https://img.ixueyi.net/images/px_vc/2024-06/406/tcJT3qFnt3.png
UML 2.0包括14种图，分别如下：
（1）类图（class diagram）。类图描述一组类、接口、协作和它们之间的关系。类图给出了系统的静态设计视图，活动类的类图给出了系统的静态进程视图。
（2）对象图（object diagram）。对象图描述一组对象及它们之间的关系。对象图描述了在类图中所建立的事物实例的静态快照。对象图是从真实案例或原型案例的角度建立的。
（3）构件图（component diagram）。构件图描述一个封装的类和它的接口、端口，以及由内嵌的构件和连接件构成的内部结构。构件图用于表示系统的静态设计实现视图。
（4）组合结构图（composite structure diagram）。组合结构图描述结构化类（例如，构件或类）的内部结构，包括结构化类与系统其余部分的交互点。组合结构图用于画出结构化类的内部内容。
（5）用例图（use case diagram）。用例图描述一组用例、参与者及它们之间的关系。用例图给出系统的静态用例视图。
（6）顺序图（sequence diagram，序列图）。顺序图是一种交互图（interaction diagram），交互图展现了一种交互，它由一组对象或参与者以及它们之间可能发送的消息构成。交互图专注于系统的动态视图。顺序图是强调消息的时间次序的交互图。
（7）通信图（communication diagram）。通信图也是一种交互图，它强调收发消息的对象或参与者的结构组织。
（8）定时图（timing diagram，计时图）。定时图也是一种交互图，它强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。
（9）状态图（state diagram）。状态图描述一个状态机，它由状态、转移、事件和活动组成。状态图给出了对象的动态视图。它对于接口、类或协作的行为建模尤为重要，而且它强调事件导致的对象行为，这非常有助于对反应式系统建模。
（10）活动图（activity diagram）。活动图将进程或其他计算结构展示为计算内部一步步的控制流和数据流。活动图专注于系统的动态视图。它对系统的功能建模和业务流程建模特别重要，并强调对象间的控制流程。
（11）部署图（deployment diagram）。部署图描述对运行时的处理节点及在其中生存的构件的配置。部署图给出了架构的静态部署视图，通常一个节点包含一个或多个部署图。
（12）制品图（artifact diagram）。制品图描述计算机中一个系统的物理结构。制品包括文件、数据库和类似的物理比特集合。制品图通常与部署图一起使用。制品也给出了它们实现的类和构件。
（13）包图（package diagram）。包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。
（14）交互概览图（interaction overview diagram）。交互概览图是活动图和顺序图的混合物。
2.2.4UML图关系
（1）用例关系包括：包含关系、扩展关系、泛化关系
包含关系：其中这个提取出来的公共用例称为抽象用例，而把原始用例称为基本用例或基础用例；当可以从两个或两个以上的用例中提取公共行为时，应该使用包含关系来表示它们。
扩展关系：如果一个用例明显地混合了两种或两种以上的不同场景，即根据情况可能发生多种分支，则可以将这个用例分为一个基本用例和一个或多个扩展用例，这样使描述可能更加清晰。
泛化关系：当多个用例共同拥有一种类似的结构和行为的时候，可以将它们的共性抽象成为父用例，其他的用例作为泛化关系中的子用例。在用例的泛化关系中，子用例是父用例的一种特殊形式，子用例继承了父用例所有的结构、行为和关系。
（2）类图/对象图关系：
依赖关系：一个事物发生变化影响另一个事物。
泛化关系：特殊/一般关系
关联关系：描述了一组链，链是对象之间的连接。
聚合关系：整体与部分生命周期不同。
组合关系：整体与部分生命周期相同。
实现关系：接口与类之间的关系
2.2.5UML图考查形式
（1）用例图考查形式：

https://img.ixueyi.net/images/px_vc/2024-06/575/ZJtkqcuz5n.png
补充参与者：参与者一般为外部实体，可以是人，也可以是外部系统。
补充用例：根据题干描述补充缺失的用例，在补充过程中需要参照用例图中用例间的关系。（用例名从题干中直接获取或提炼）
分析用例间的关系
其他：可能会出现其他题型，比如添加新的用例等。
（2）类图/对象图考查形式（常与其他UML图结合考查）

https://img.ixueyi.net/images/px_vc/2024-06/493/aYFAcArAZ7.png
补充类名/对象名：一般为名词，来源于题干描述。
补充多重度：多重度体现类与类或对象与对象之间的对应关系，有0…1，1..1，1…*/n，*…*/m…n。
分析类与类或对象与对象之间的关系。
（3）顺序图考查形式

https://img.ixueyi.net/images/px_vc/2024-06/601/XmfXADEY4q.png
补充类名/对象名
补充消息
顺序图的组合片段：
 Loop【循环】：如果满足“循环条件”，则重复执行本框中的内容。
 Alt【条件分支】：满足条件1，则执行条件1对应的内容，满足条件2则执行条件2对应的内容。
 Opt【可选分支】：如果条件满足，则执行框中内容，否则跳过不执行。
（4）活动图考查形式

https://img.ixueyi.net/images/px_vc/2024-06/133/r6wAQdeWFu.png
补充动作名称
补充监护表达式
分析并发关系
活动图与流程图关系：
 活动图描述的是对象活动的顺序关系所遵循的规则，它着重表现系统的行为，而非处理过程；而流程图着重描述处理过程。
 流程图一般都限于顺序进程，而活动图则可以支持并发进程。
 活动图是面向对象的，而流程图是面向过程的。
（5）状态图考查形式

https://img.ixueyi.net/images/px_vc/2024-06/359/Rct4UVtZzD.png
补充状态
补充触发事件、监护条件、动作
活动图与状态图对比：
 状态图主要用于描述一个对象在其生存期间的动态行为，表现一个对象所经历的状态序列，引起状态转移的事件（event），以及因状态转移而伴随的动作（action）。
 活动图可以用于描述系统的工作流程和并发行为。活动图其实可看作状态图的特殊形式，活动图中一个活动结束后将立即进入下一个活动（在状态图中状态的转移可能需要事件的触发）。
 两者最大的区别是：状态图侧重于描述行为的结果，而活动图侧重描述行为的动作。其次活动图可描述并发行为，而状态图不能。
（6）通信图考查形式

https://img.ixueyi.net/images/px_vc/2024-06/631/BXEhyLF3tu.png
补充对象名
补充消息
2.2.6“4+1”视图

https://img.ixueyi.net/images/px_vc/2024-06/277/C38UeMpkgK.png
UML采用4+1视图来描述软件和软件开发过程：
（1）逻辑视图：以问题域的语汇组成的类和对象集合。
（2）进程视图：可执行线程和进程作为活动类的建模，它是逻辑视图的一次执行实例，描绘了所设计的并发与同步结构。
（3）实现视图：对组成基于系统的物理代码的文件和组件进行建模。
（4）部署视图：把构件部署到一组物理的、可计算的节点上，表示软件到硬件的映射及分布结构。
（5）用例视图：最基本的需求分析模型。
2.2.7OOA需求建模

https://img.ixueyi.net/images/px_vc/2024-06/868/b8dTgtQzen.png
用例模型建立流程：
第一步：识别参与者【参与者：用户、组织、外部系统、时间】
第二步：合并需求获得用例
第三步：细化用例描述
第四步：调整用例模型（可选步骤）【关系包括：包含关系、扩展关系、泛化关系】
分析模型建立流程：
第一步：定义概念类
（1）阅读和理解需求文档或用例描述。
（2）筛选出名词或名词短语，建立初始类清单（候选类）。
（3）将候选类分成三类，分别是显而易见的类、明显无意义的类和不确定类别的类。
（4）舍弃明显无意义的类：去除相同含义的、去除不属于系统范围内的、去除没有特定独立行为的、去除含义解释不清楚的、去除属于另一个类属性或行为的。
（5）小组讨论不确定类别的类，直到将它们都合并或调整到其他两个类别，并进行相应的操作。
第二步：确定类之间的关系
第三步：为类添加职责
第四步：建立交互图
第五步：分析模型的详细程度问题
3.需求定义
（1）严格定义法：
所有需求都能够被预先定义
开发人员与用户之间能够准确而清晰地交流
采用图形/文字可以充分体现最终系统。
（2）原型法：
并非所有的需求都能在开发前被准确地说明
项目参加者之间通常都存在交流上的困难
需要实际的、可供用户参与的系统模型
有合适的系统开发环境
反复是完全需要和值得提倡的，需求一旦确定，就应遵从严格的方法
4.需求验证
需求验证的成果物为【需求基线】，需求基线是验收标准之一。

12.4 四、需求管理
开始学习
1.变更控制
需求变更控制过程：
（1）变更申请。应记录变更的提出人、日期、申请变更的内容等信息。
（2）变更评估。对变更的影响范围、严重程度、经济和技术可行性进行系统分析。
（3）变更决策。由CCB决定是否实施变更。
（4）变更实施。由管理者指定的工作人员在受控状态下实施变更。
（5）变更验证。由配置管理人员或受到变更影响的人对变更结果进行评价，确定变更结果和预期是否相符、相关内容是否进行了更新、工作产物是否符合版本管理的要求。
（6）沟通存档。将变更后的内容通知可能会受到影响的人员，并将变更记录汇总归档。如提出的变更在决策时被否决，其初始记录也应予以保存。
2.需求跟踪
需求跟踪是将单个需求和其他系统元素之间的依赖关系和逻辑联系建立跟踪，这些元素包括各种类型的需求、业务规则、系统架构和构件、源代码、测试用例，以及帮助文件等。

12.5 五、FAST方法
开始学习
FAST方法（Framework for the Application of System Techniques）：中文意思为：系统技术应用框架，其阶段可划分为：
初始研究阶段：列出问题和机会、协商项目的初步范围、评估项目价值、计划项目。
问题分析阶段：研究问题领域、分析问题和机会、分析业务过程、制定系统改进目标。
需求分析阶段：定义需求、分析功能需求、跟踪和完善需求、排列需求的优先次序。
决策分析阶段：确定候选方案、分析候选方案、比较候选方案、推荐一个方案。
【类别辨识技巧】

https://img.ixueyi.net/images/px_vc/2024-06/633/ppdABcj55w.png
['第13章', '第十三章', '系统设计']
13.1 一、软件架构设计
开始学习
1.架构的概念
架构设计就是需求分配，即将满足需求的职责分配到组件上。
架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个构件有效地组织成一个完整的系统。
架构风格定义了用于描述系统的术语表和一组指导构建系统的规则。
2.五大架构风格

https://img.ixueyi.net/images/px_vc/2024-06/31/VRVLZugAy5.png

https://img.ixueyi.net/images/px_vc/2024-06/704/HJW8Kw2vzh.png
3.基于服务的架构（SOA）
（1）服务
服务是一种为了满足某项业务需求的操作、规则等的逻辑组合，它包含一系列有序活动的交互，为实现用户目标提供支持。
服务的特点是：松散耦合、粗粒度、标准化接口。
（2）SOA的实现方式 – Web Service
Web Service中服务提供者与消费者之间可以静态绑定，也可以动态绑定，若动态绑定则需要用到注册中心，注册中心的引入能提升可扩展性。
【Web Service】应用系统的六大层次：
 底层传输层
 服务通信协议层
 服务描述层
 服务层
 业务流程层
 服务注册层
（3）SOA的实现方式 – ESB
ESB的功能：
 提供位置透明性的消息路由和寻址服务
 提供服务注册和命名的管理功能
 支持多种的消息传递范型
 支持多种可以广泛使用的传输协议
 支持多种数据格式及其相互转换
 提供日志和监控功能
（4）SOA的关键技术：
【UDDI】：服务发布、查找和定位的方法。
【WSDL】：对服务进行描述的语言。
【SOAP】：服务请求者和服务提供者之间的消息传输规范。
4.微服务
（1）概念
微服务顾名思义，就是很小的服务，所以它属于面向服务架构的一种。
微服务在更小的基础上，其实进一步在突显其独立性。
（2）微服务的优势
 小服务【且专注于做⼀件事情】
 轻量级的通信机制
 松耦合
 独立测试
 独立部署【简单部署】
 独立运行【每个服务独立在其独立进程中】
 支持异构【如每个服务使用不同数据库】
 更好的可用性与弹性
 化整为零，易于小团队开发
（3）微服务面临的挑战
 分布式环境下的数据一致性【更复杂】
 测试的复杂性【服务间依赖测试】
 运维的复杂性
（4）微服务与SOA的对比

https://img.ixueyi.net/images/px_vc/2024-06/910/baPntxtve7.png
5.MDA(Model Driven Architecture)
（1）MDA的主要目标：Portability（可移植性）、interoperability（互通性）、Reusability（可重用性）
（2）MDA的核心模型：
计算无关模型（CIM）：对某具体行业内一个项目的业务需求及其系统功能需求进行分析
平台独立模型（PIM）：具有高抽象层次、独立于任何实现技术的模型。
平台相关模型（PSM）：为某种特定实现技术量身定做，让你用这种技术中可用的实现构造来描述系统的模型。PIM会被变换成一个或多个PSM。
代码Code：用源代码对系统的描述（规约）。每个PSM都将被变换成代码。
6.架构评估
基于场景的方式：
【场景】是从风险承担者的角度与系统交互的简短描述。
场景可从三个方面进行描述：刺激、环境、响应
【刺激（Stimulus）】场景中解释或描述项目干系人怎样引发与系统的交互部分。
【环境（Environment）】描述刺激发生时的情况。
【响应（Response）】系统是如何通过架构对刺激作出反应的。
（1）SAAM：最初用于分析架构可修改性，后扩展到其他质量属性。

https://img.ixueyi.net/images/px_vc/2024-06/984/42F76rVQWC.png
（2）ATAM：在SAAM的基础上发展起来的。ATAM希望揭示出架构满足特定质量目标的情况，使架构设计师更清楚地认识到质量目标之间的联系，即如何权衡多个质量目标。
主要针对性能、可用性、安全性和可修改性。

https://img.ixueyi.net/images/px_vc/2024-06/584/wRaSQ7t5cj.png
13.2 二、软件设计
开始学习
软件设计包括体系结构设计、接口设计、数据设计和过程设计。
 结构设计：定义软件系统各主要部件之间的关系。
 数据设计：将模型转换成数据结构的定义。好的数据设计将改善程序结构和模块划分，降低过程复杂性。
 接口设计（人机界面设计）：软件内部，软件和操作系统间以及软件和人之间如何通信。
 过程设计：系统结构部件转换成软件的过程描述。

13.3 三、人机界面设计
开始学习
人机界面设计—“黄金三准则”
（1）置于用户控制之下
 以不强迫用户进入不必要的或不希望的动作的方式来定义交互方式
 提供灵活的交互
 允许用户交互可以被中断和撤销
 当技能级别增加时可以使交互流水化并允许定制交互
 使用户隔离内部技术细节
 设计应允许用户和出现在屏幕上的对象直接交互
（2）减少用户的记忆负担
 减少对短期记忆的要求
 建立有意义的缺省
 定义直觉性的捷径
 界面的视觉布局应该基于真实世界的隐喻
 以不断进展的方式揭示信息
（3）保持界面的一致性
 允许用户将当前任务放入有意义的语境
 在应用系列内保持一致性
 如过去的交互模型已建立起了用户期望，除非有迫不得已的理由，不要改变它

13.4 四、工作流设计
开始学习
1.工作流管理系统（ WorkFlow Management System，WFMS）的基本功能
（1）对工作流进行建模。即定义工作流，包括具体的活动和规则等，所创建的模型是同时可以被人和计算机所“理解”的，工作流对应现实世界的业务处理过程，不能改变真实业务的处理逻辑。
（2）工作流执行。遵循工作流模型来创建和执行实际的工作流，即通过WFMS可以执行多个工作项。
（3）业务过程的管理和分析。监控和管理执行中的业务（工作流），例如，进度完成情况和数据所处状态、工作分配与均衡情况等。
2.工作流参考模型（Workflow Reference Model，WRM）

https://img.ixueyi.net/images/px_vc/2024-06/123/F3SehCUwcf.png
（1）工作流执行服务：核心模块，功能包括创建和管理流程定义，创建、管理和执行流程实例。
（2）工作流引擎：是为流程实例提供运行环境，并解释执行流程实例的软件模块。
（3）流程定义工具：是管理流程定义的工具，它可以通过图形方式把复杂的流程定义显示出来并加以操作，流程定义工具与工作流执行服务交互，一般该模块为设计人员提供图形化的用户界面。
（4）客户端应用：是通过请求的方式与工作流执行服务交互的应用。
（5）调用应用：是被工作流执行服务调用的应用，调用应用与工作流执行服务交互。
（6）管理监控工具：主要指组织机构和参与者等数据的维护管理和流程执行情况的监控，管理监控工具与工作流执行服务交互。

13.5 五、结构化设计
开始学习
概要设计【外部设计】：功能需求分配给软件模块，确定每个模块的功能和调用关系，形成模块结构图
详细设计【内部设计】：为每个具体任务选择适当的技术手段和处理方法
1.结构化设计的原则
2.模块独立性的度量
（1）聚合：衡量模块内部各元素结合的紧密程度

https://img.ixueyi.net/images/px_vc/2024-06/350/kRtJHTnGn8.png
（2）耦合：度量不同模块间互相依赖的程度

https://img.ixueyi.net/images/px_vc/2024-06/792/PBe7VdNWHG.png
（3）模块的四个要素
输入和输出：模块的输入来源和输出去向都是同一个调用者，即一个模块从调用者那取得输入，进行加工后再把输出返回调用者。
处理功能：指模块把输入转换成输出所做的工作。
内部数据：指仅供该模块本身引用的数据。
程序代码：指用来实现模块功能的程序。

13.6 六、面向对象设计
开始学习
1.设计原则
单一职责原则：设计目的单一的类
开放-封闭原则：对扩展开放，对修改封闭
李氏（Liskov）替换原则：子类可以替换父类
依赖倒置原则：要依赖于抽象，而不是具体实现；针对接口编程，不要针对实现编程
接口隔离原则：使用多个专门的接口比使用单一的总接口要好
组合重用原则：要尽量使用组合，而不是继承关系达到重用目的
迪米特（Demeter）原则（最少知识法则）：一个对象应当对其他对象有尽可能少的了解
2.设计模式
（1）概念
架构模式：软件设计中的高层决策，例如C/S结构就属于架构模式，架构模式反映了开发软件系统过程中所作的基本设计决策
设计模式：主要关注软件系统的设计，与具体的实现语言无关
惯用法：是最低层的模式，关注软件系统的设计与实现，实现时通过某种特定的程序设计语言来描述构件与构件之间的关系。每种编程语言都有它自己特定的模式，即语言的惯用法。例如引用-计数就是C++语言中的一种惯用法
（2）设计模式分类
创建型模式与对象的创建有关，抽象了实例化过程，它们帮助一个系统独立于如何创建、组合和表示它的那些对象。一个类创建型模式使用继承改变被实例化的类，而一个对象创建型模式将实例化委托给另一个对象。
结构型模式处理类或对象的组合，结构型设计模式涉及如何组合类和对象以获得更大的结构。结构型类模式采用继承机制来组合接口或实现。结构型对象模式不是对接口和实现进行组合，而是描述了如何对一些对象进行组合，从而实现新功能的一些方法。
行为模式涉及算法和对象间职责的分配。行为模式不仅描述对象或类的模式，还描述它们之间的通信模式。行为型类模式使用继承机制在类间分配行为，这里包括模板类模式和解释器类模式。行为对象模式使用对象复合而不是继承。一些行为对象模式描述了一组对等的对象怎样相互协作以完成其中任一对象都无法单独完成的任务。

https://img.ixueyi.net/images/px_vc/2024-06/904/wXWTCa6vBX.png
（3）设计模式适用场景
创建型模式

https://img.ixueyi.net/images/px_vc/2024-06/621/yJUGcnxdf0.png
结构型模式

https://img.ixueyi.net/images/px_vc/2024-06/305/pFDKjbvbw6.png
行为型模式

https://img.ixueyi.net/images/px_vc/2024-06/750/hP4WcfZ4Rz.png

13.7 七、Web开发
开始学习
1.维度

https://img.ixueyi.net/images/px_vc/2024-06/683/PF99xpdsJg.png
2.负载均衡技术
2.1应用层负载均衡
（1）http重定向。HTTP重定向就是应用层的请求转发。用户的请求其实已经到了HTTP重定向负载均衡服务器，服务器根据算法要求用户重定向，用户收到重定向请求后，再次请求真正的集群。
特点：实现简单，但性能较差。
（2）反向代理服务器。在用户的请求到达反向代理服务器时（已经到达网站机房），由反向代理服务器根据算法转发到具体的服务器。常用的apache、nginx都可以充当反向代理服务器。
特点：部署简单，但代理服务器可能成为性能的瓶颈。
2.2传输层负载均衡
（1）DNS域名解析负载均衡。DNS域名解析负载均衡就是在用户请求DNS服务器，获取域名对应的IP地址时，DNS服务器直接给出负载均衡后的服务器IP。
特点：效率比HTTP重定向高，减少维护负载均衡服务器成本。但一个应用服务器故障，不能及时通知DNS，而且DNS负载均衡的控制权在域名服务商那里，网站无法做更多的改善和更强大的管理。
（2）基于NAT的负载均衡。基于NAT的负载均衡将一个外部IP地址映射为多个IP地址，对每次连接请求动态地转换为一个内部节点的地址。
特点：技术较为成熟，一般在网关位置，可以通过硬件实现。像四层交换机一般就采用了这种技术。
2.3硬件负载均衡：F5
2.4软件负载均衡：LVS、Nginx、HAproxy
2.5静态算法（不考虑动态负载）：
（1）轮转算法：轮流将服务请求（任务）调度给不同的节点（即：服务器）。
（2）加权轮转算法：考虑不同节点处理能力的差异。
（3）源地址哈希散列算法：根据请求的源IP地址，作为散列键从静态分配的散列表找出对应的节点。
（4）目标地址哈希散列算法：根据请求目标IP做散列找出对应节点。
（5）随机算法：随机分配，简单，但不可控。
2.6动态算法（考虑动态负载）
（1）最小连接数算法：每个节点处理能力相同的情况下，新请求分配给当前活动请求数量最少的节点。
（2）加权最小连接数算法：考虑节点处理能力不同，按最小连接数分配。
（3）加权百分比算法：考虑了节点的利用率、硬盘速率、进程个数等，使用利用率来表现剩余处理能力。
3.有状态和无状态
无状态服务（stateless service）对单次请求的处理，不依赖其他请求，也就是说，处理一次请求所需的全部信息，要么都包含在这个请求里，要么可以从外部获取到（比如说数据库），服务器本身不存储任何信息。
有状态服务（stateful service）则相反，它会在自身保存一些数据，先后的请求是有关联的。
4.持久化技术
（1）ORM（Object Relational Mapping）：对象与关系数据之间的映射。
（2）映射关系表

https://img.ixueyi.net/images/px_vc/2024-06/404/3jvYAzTgDW.png
（3）实现技术对比

https://img.ixueyi.net/images/px_vc/2024-06/679/KpufkyfWB7.png
5.主从数据库
（1）主从数据库结构特点：
一般：一主多从，也可以多主多从。
主库做写操作，从库做读操作。
（2）主从复制步骤：
主库（Master）更新数据完成前，将操作写binlog日志文件。
从库（Slave）打开I/O线程与主库连接，做binlog dump process，并将事件写入中继日志。
从库执行中继日志事件，保持与主库一致。
6.缓存
6.1常见缓存技术：
（1）MemCache：是一个高性能的分布式的内存对象缓存系统，用于动态Web应用以减轻数据库负载。Memcache在内存里维护一个统一的巨大的hash表，数据存在该hash表中。
（2）Redis：是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库（支持多种数据结构，如key-value、string、set、list等），并提供多种语言的API。
（3）Squid：是一个高性能的代理缓存服务器，Squid支持FTP、gopher、HTTPS和HTTP协议。
6.2Redis和Memcache对比

https://img.ixueyi.net/images/px_vc/2024-06/654/AYuCKuFD5X.png
6.3Redis分布式存储方案

https://img.ixueyi.net/images/px_vc/2024-06/278/WXLhuw45tP.png
6.4Redis常见集群切片方式

https://img.ixueyi.net/images/px_vc/2024-06/277/9e2bXZKqR8.png
6.5Redis数据分片方案

https://img.ixueyi.net/images/px_vc/2024-06/78/mXeRFhTuN7.png
6.6Redis数据类型

https://img.ixueyi.net/images/px_vc/2024-06/466/wmCdXmVYk4.png
6.7 Redis持久化方式
Redis的持久化主要有两种方式：RDB和AOF
RDB：传统数据库中快照的思想。指定时间间隔将数据进行快照存储。
AOF：传统数据库中日志的思想，把每条改变数据集的命令追加到AOF文件末尾，这样出问题了，可以重新执行AOF文件中的命令来重建数据集。

https://img.ixueyi.net/images/px_vc/2024-06/685/Yp68t5VWTn.png
6.8Redis内存淘汰机制

https://img.ixueyi.net/images/px_vc/2024-06/968/KYHRgq4cAX.png
6.9Redis常见难题
（1）缓存雪崩：大部分缓存失效 -> 数据库崩溃
解决方案：
（2）：缓存穿透：查询无数据返回 -> 直接查数据库
解决方案：
（3）：缓存预热：系统上线后，将相关需要缓存的数据直接加到缓存系统中
解决方案：
（4）：缓存更新
除Redis系统自带的缓存失效策略，常见采用以下两种：
（5）：缓存降级
降级的目的是保证核心服务可用，即使是有损的，而且有些服务是无法降级的（如电商的购物流程等）
在进行降级之前要对系统进行梳理，从而梳理出哪些必须保护，哪些可降级。
6.10布隆过滤器
布隆过滤器用于快速识别一个元素不在一个集合中。
通过一个长二进制向量和一系列随机映射函数来记录与识别某个数据是否在一个集合中。

https://img.ixueyi.net/images/px_vc/2024-06/974/LspP2tJtH6.png
7.CDN内容分发网络
CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。
8.XML与JSON
（1）扩展标记语言（Extensible Markup Language, XML），用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。
优点：
缺点：
（2）JSON（JavaScript Object Notation）一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换。
优点：
缺点：没有XML格式这么推广的深入人心和应用广泛，没有XML那么通用。
9.Web应用服务器
（1）概念
WEB应用服务器可以理解为两层意思：
WEB服务器：其职能较为单一，就是把浏览器发过来的Request请求，返回Html页面。
应用服务器：进行业务逻辑的处理。
（2）常见服务器
Apache：Web服务器，市场占有率60%左右。它可以运行在几乎所有的Unix、Windows、Linux系统平台上。
IIS：早期Web服务器，目前小规模站点仍有应用。
Tomcat：开源、运行servlet和JSP Web应用软件的基于Java的Web应用软件容器。
JBOSS：JBOSS是基于J2EE的开放源代码的应用服务器。一般与Tomcat或Jetty绑定使用。
WebSphere：一种功能完善、开放的Web应用程序服务器，它是基于Java的应用环境，用于建立、部署和管理Internet 和Intranet Web应用程序。
WebLogic：BEA WebLogic Server是一种多功能、基于标准的web应用服务器，为企业构建自己的应用提供了坚实的基础。
Jetty：Jetty是一个开源的servlet容器，它为基于Java的web内容，例如JSP和servlet提供运行环境。
10.REST
（1）概念：REST（Representational State Transfer，表述性状态转移）是一种通常使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。
（2）REST的5个原则
11.响应式Web设计
（1）概念：响应式WEB设计是一种网络页面设计布局，其理念是：集中创建页面的图片排版大小，可以智能地根据用户行为以及使用的设备环境进行相对应的布局。
（2）方法与策略
i采用流式布局和弹性化设计：使用相对单位，设定百分比而非具体值的方式设置页面元素的大小。
ii响应式图片：不仅要同比的缩放图片，还要在小设备上降低图片自身的分辨率。
12.中台
（1）概念：中台是一套结合互联网技术和行业特性，将企业核心能力以共享服务形式沉淀，形成“大中台、小前台”的组织和业务机制，供企业快速低成本的进行业务创新的企业架构。中台又可以进一步细分，比如业务中台、数据中台、XX中台。本质上，都是对企业通用能力在不同层面的沉淀，并对外能力开放。
（2）业务中台、数据中台和技术中台
【业务中台】：提供重用服务，例如学员中心、课程中心之类的开箱即用可重用能力。
【数据中台】：提供数据整合分析能力，帮助企业从数据中学习改进，调整方向。
【技术中台】：提供技术重用组件能力，帮助解决基础技术平台的复用。如：中间件、分布式存储、AI、负载均衡等基础设施。
（3）数据中台必备的4个核心能力：
13.云计算
13.1概念
云计算是集合了大量计算设备和资源，对用户屏蔽底层差异的分布式处理架构，其用户与提供实际服务的计算资源是相分离的。
13.2优点
超大规模、虚拟化、高可靠性、高可伸缩性、按需服务、成本低（前期投入低、综合使用成本也低）
13.3按服务类型分类：
软件即服务（SaaS）：基于多租户技术实现，直接提供应用程序
平台即服务（PaaS）：虚拟中间件服务器、运行环境和操作系统
基础设施即服务（IaaS）：包括服务器、存储和网络等服务
13.4按部署方式分类：
公有云：面向互联网用户需求，通过开放网络提供云计算服务
私有云：面向企业内部提供云计算服务
混合云：兼顾以上两种情况的云计算服务
13.5云计算架构：
（1）资源层：资源层提供虚拟化的资源，从而隐藏物理资源的复杂性。如：服务器、存储。
（2）平台层：平台层为用户提供对资源层服务的封装，使用户可以构建自己的应用。
（3）应用层：应用层提供软件服务，如：财务管理、客户关系管理、商业智能。
（4）用户访问层：用户访问层方便用户使用云计算服务所需的各种支撑服务，针对每个层次的云计算服务都需要提供相应的访问接口。
（5）管理层：管理层提供对所有层次云计算服务的管理功能。
14.云原生架构
云原生（Cloud Native）一开始就是基于云环境、专门为云端特性而设计，可充分利用和发挥云平台的弹性+分布式优势，最大化释放云计算生产力。
15.边缘计算
边缘计算是指在靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务。
【边缘计算的本质】计算处理职能的本地化。
16.物联网
（1）概念
物联网（The Internet of Things）是实现物物相连的互联网络，其内涵包含两个方面：第一，物联网的核心和基础仍然是互联网，是在互联网基础上延伸和扩展的网络；第二，其用户端延伸和扩展到了任何物体与物体之间，使其进行信息交换和通信
（2）物联网分层架构
感知层：识别物体、采集信息。如：传感器、芯片、通信模组、感知类智能设备/装置
网络层：传递信息和处理信息。接入网、核心网、业务网、专有网络、通信标准/协议
平台层：操作系统、软件开发、设备管理平台、连接管理平台
应用层：解决信息处理和人机交互的问题。应用服务、智能终端
17.大数据
（1）大数据的概述
大数据是指其大小或复杂性无法通过现有常用的软件工具，以合理的成本并在可接受的时限内对其进行捕获、管理和处理的数据集。这些困难包括数据的收入、存储、搜索、共享、分析和可视化。
5个V：大规模（Volume）、高速度（Velocity）、多样化（Variety）、价值密度低（Value）、真实性（Veracity）
大数据的应用领域：制造业的应用、服务业的应用、交通行业的应用、医疗行业的应用等
大数据面临着5个主要问题，分别是异构性（Heterogeneity）、规模（Scale）、时间性（Timeliness）、复杂性（Complexity）和隐私性（Privacy）。
大数据的研究工作将面临5个方面的挑战：
挑战一：数据获取问题。
挑战二：数据结构问题。
挑战三：数据集成问题。
挑战四：数据分析、组织、抽取和建模是大数据本质的功能性挑战。
挑战五：如何呈现数据分析的结果，并与非技术的领域专家进行交互。
建议采用现有成熟技术解决大数据带来的挑战，并给出了大数据分析的分析步骤，大致分为数据获取/记录、信息抽取/清洗/注记、数据集成/聚集/表现、数据分析/建模和数据解释5个主要阶段。
（2）大数据处理系统概述
Hbase：分布式、面向列的开源数据库，适合于非结构化数据存储。【实时数据和离线数据均支持】。
HDFS（Hadoop分布式文件系统）：适合运行在通用硬件上的分布式文件系统（Distributed File System）。HDFS是一个高度容错性的系统，适合部署在廉价的机器上。HDFS能提供高吞吐量的数据访问，非常适合大规模数据集上的应用，【通常用于处理离线数据的存储】。
Flume：高可用/可靠，分布式海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。
Kafka：一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。
ZooKeeper：开放源码的分布式应用程序协调服务，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。
（3）Lambda架构

https://img.ixueyi.net/images/px_vc/2024-06/195/Yw9RfKNMyf.png
批处理层（Batch Layer）：两个核心功能：存储数据集和生成Batch View。
加速层（Speed Layer）：存储实时视图并处理传入的数据流，以便更新这些视图。
服务层（Serving Layer）：用于响应用户的查询请求，合并Batch View 和Real-time View中的结果数据集到最终的数据集。

https://img.ixueyi.net/images/px_vc/2024-06/580/dF46v398U4.png
（4）Kappa架构

https://img.ixueyi.net/images/px_vc/2024-06/279/Srv4jSw33A.png
输入数据直接由实时层的实时数据处理引擎对源源不断的源数据进行处理；
再由服务层的服务后端进一步处理以提供上层的业务查询。
而中间结果的数据都是需要存储的，这些数据包括历史数据与结果数据，统一存储在存储介质中。

https://img.ixueyi.net/images/px_vc/2024-06/12/GVptZ3Rgtc.png
（5）Lambda架构与Kappa架构对比和设计选择

https://img.ixueyi.net/images/px_vc/2024-06/799/V6E5vz6QAP.png
['第14章', '第十四章', '系统测试与维护']
14.1 一、系统测试
开始学习
1.测试的目标
测试是为了发现错误而执行程序的过程。
2.软件测试原则
（1）应尽早并不断地进行测试
（2）程序员避免测试自己设计的程序：测试工作应避免由原开发软件的人或小组来承担（单元测试除外）
（3）不仅要包括合理、有效的输入条件，也要包括不合理、失效的输入条件
（4）不仅要确定输入数据，而且要从系统的功能出发确定输出的结果
（5）不仅要检测程序是否做了该做的事，还要检测是否做了不该做的事
（6）修改后应进行回归测试
（7）尚未发现的错误数量与该程序已发现的错误数成正比。
3.基本测试活动与步骤
（1）制定系统测试计划：进行人员以及任务的确定，明确测试范围、测试方法、测试环境与辅助工具
（2）设计系统测试用例：如：等价类划分、边界值分析等测试方法的应用
（3）执行系统测试：执行设计好的测试用例，并记录结果
（4）缺陷管理与改错：消除已发现的错误
4.测试阶段划分

https://img.ixueyi.net/images/px_vc/2024-06/198/p3BbXaN3J4.png
（1）单元测试
概念：又称模块测试，是通过对每个最小的软件模块进行测试，对照模块的功能说明，检查各个程序模块是否正确地实现了规定的功能，确保其能正常工作。
测试主体：单元测试由开发人员执行
测试内容：模块接口测试、局部数据结构测试、路径测试、错误处理测试、边界测试（模块测试，模块功能、性能、接口等）。
（2）集成测试
概念：在单元测试的基础上，需要将所有模块按照概要设计说明书和详细设计说明书的要求进行组装。主要目的是验证组成软件系统的各模块的接口和交换作用。（模块间的接口）
组装时需要考虑的问题：在把各个模块连接起来的时候，穿越模块接口的数据是否会丢失；一个模块的功能是否会对另一个模块的功能产生不利的影响；各个子功能组合起来，能否达到预期要求的父功能；全局数据结构是否有问题；单个模块的误差累积起来，是否会放大，以致达到不能接受的程度。
模块组装方式：
 自顶向下的增殖方式：优点：在测试过程中较早地验证了主要的控制和判断点；功能可行性较早地得到证实，还能增强开发者和用户成功的信心。缺点：导致过多的回归测试；增加建桩模块的复杂度，导致增加附加测试。
 自底向上的增殖方式：优点：可以把容易出问题的部分在早期解决；缺点：对主要部分的控制直到最后才能接触到；可以实施多个模块的并行测试，提高测试效率。
 混合增殖方式
完成的标志：成功地执行了测试计划中规定的所有集成测试；修正了所发现的错误（与用户就剩余错误的修改计划达成一致）；测试结果通过了专门小组的评审
（3）系统测试
概念：系统测试真实环境下，验证完整的软件配置项能否和系统正确连接。将软件与整个系统的硬件、外设、支持软件、数据和人员等结合起来，以需求规格说明为依据，在实际运行环境下进行测试。检验其是否有不符合系统说明书的地方。
内容：功能测试、性能测试、健壮性测试、用户界面测试、安全性测试、安装与反安装测试
性能测试又可以进一步分类为：
（4）确认测试
概念：又称合格性测试，用来验证软件与用户需求的一致性。
确认测试包括：内部确认测试、Alpha测试、Beta测试，验收测试。其中Alpha测试和Beta测试一般是针对产品型的软件，项目中一般不采用。
Alpha测试：是在开发环境下进行的测试，由用户/内部用户模拟实际操作环境下进行的受控测试。
Beta测试：是用户在实际使用环境下进行的测试。
5.静态测试与动态测试
静态测试它就不运行软件测试的程序，而是采用人工检测、计算机分析辅助静态分析的手段来对程序进行检测。静态测试的方法主要有桌前检查、代码走查、代码审查。
动态测试可以分为黑盒测试、白盒测试和灰盒测试。白盒测试也称为结构性测试，黑盒测试也称为功能性测试。灰盒测试是二者的结合。
6.静态分析
静态测试都是做的静态分析，静态分析有：
7.动态测试方法
（1）白盒测试（结构测试）：主要用于单元测试阶段。
概念：根据内部结构和逻辑来设计测试用例，对程序路径和过程进行测试。主要用于单元测试阶段。

https://img.ixueyi.net/images/px_vc/2024-06/161/uSVMrMLMJ5.png
（2）黑盒测试（功能测试）：主要用于集成测试、确认测试和系统测试阶段。
概念：黑盒测试基于产品功能规格说明书，从用户角度针对产品特定的功能和特性进行验证活动，确认每个功能是否得到完整实现，用户能否正常使用这些功能。主要用于集成测试、确认测试和系统测试阶段。
黑盒测试在不知道系统或组件内部结构的情况下进行，不考虑内部逻辑结构，着眼于程序外部结构，在软件接口处进行测试。
方法：

https://img.ixueyi.net/images/px_vc/2024-06/686/kuCHRwFef2.png
8.面向对象的测试
算法层（单元测试）：包括等价类划分测试、组合功能测试（基于判定表的测试）、递归函数测试和多态消息测试。（方法层次）
类层（模块测试）：包括不变式边界测试、模态类测试和非模态类测试
模板层/类树层（集成测试）：包括多态服务测试和展平测试
9.新型的测试种类

https://img.ixueyi.net/images/px_vc/2024-06/704/V9ZVJNCy4p.png
14.2 二、软件调试
开始学习
1.软件调试方法
（1）蛮力法：主要思想是“通过计算机找错”，低效，耗时
（2）回溯法：从出错处人工沿控制流程往回追踪，直至发现出错的根源。复杂程序由于回溯路径多，难以实施（适合于小型程序）
（3）原因排除法：主要思想是演绎和归纳，用二分法实现
2.软件调试与测试的区别

https://img.ixueyi.net/images/px_vc/2024-06/209/wgwP8szEer.png
14.3 三、遗留系统演化策略
开始学习

https://img.ixueyi.net/images/px_vc/2024-06/981/GYrJnZ8NVS.png
（1）改造策略【高水平，高价值】：在遗留系统的基础上，新增功能或做改进使用。
（2）集成策略【高水平，低价值】：存在信息孤岛，通过集成打通信息孤岛。
（3）淘汰策略【低水平，低价值】
（4）继承策略【低水平，高价值】完全兼容遗留系统的功能模型和数据模型的方式重新开发系统。

14.4 四、新旧系统转换策略
开始学习
（1）直接转换【风险高，成本低】
（2）并行转换【风险低，成本高】：新旧系统并行运行一段时间。
（3）分段转换【折中方案】：如：分地域上新系统，分子系统分阶段上线新系统。

14.5 五、系统运行与维护
开始学习
1.影响可维护性的因素
（1）可理解性：是指通过阅读源代码和相关文档，了解软件的功能和如何运行的容易程度。
（2）可修改性：是指修改软件的难易程度。
（3）可测试性：是指验证软件程序正确的难易程度。
可测试性好的软件，通常意味着软件设计简单，复杂性低。因为软件的复杂性越大，测试的难度也就越大。
（4）可靠性：一个软件的可靠性越高，需要维护的概率就会越低。
（5）可移植性：是指将软件从一个环境移植到新的环境下正确运行的难易程度。软件运行环境的变化是软件维护的一种常见情形，可移植性好的软件会降低维护的概率。
2.软件维护分类
正确性维护【修BUG】：识别和纠正软件错误/缺陷，测试不可能发现所有错误。
适应性维护【应变】：指使应用软件适应环境变化【外部环境、数据环境】而进行的修改。
完善性维护【新需求】：扩充功能和改善性能而进行的修改。
预防性维护【针对未来】：为了适应未来的软硬件环境的变化，应主动增加预防性的新的功能，以使系统适应各类变化而不被淘汰。经典实例：【专用】改【通用】。

['第15章', '第十五章', '信息安全分析与设计']
15.1 一、安全基础技术
开始学习
1.对称加密
对称加密（又称为私人密钥加密/共享密钥加密）：加密与解密使用同一密钥。
特点：加密强度不高，但效率高，易破解；密钥分发困难。
【用途】对消息明文进行加密传送
常见对称密钥加密算法：
DES：替换+移位、56位密钥、64位数据块、速度快、密钥易产生
3DES（三重DES）：密钥长度112【两个56位的密钥K1、K2】
加密：K1加密->K2解密->K1加密
解密：K1解密->K2加密->K1解密
IDEA：128位密钥、64位明文/密文，PGP采用该算法。
其它：RC-5、AES。
2.非对称加密
非对称加密（又称为公开密钥加密）：密钥必须成对使用（公钥加密，相应的私钥解密）。
特点：加密强度高，但效率低，极难破解；密钥分发容易。
【用途】：对密钥加密，做数字签名
常见非对称密钥加密算法：
RSA：2048位（或1024位）密钥
Elgamal：安全性依赖于计算有限域上离散对数这一难题
ECC：椭圆曲线算法
3.信息摘要与数字签名
（1）信息摘要：单向散列函数【不可逆】、固定长度的散列值。
摘要用途：确保信息【完整性】，防篡改。
常用的消息摘要算法有MD5，SHA，HMAC等，市场上广泛使用的MD5，SHA-1算法的散列值分别为128和160位，由于SHA-1通常采用的密钥长度较长，因此安全性高于MD5。
（2）数字签名：发送者使用自己的私钥对摘要签名，接收者利用发送者的公钥对接收到的摘要进行验证。

https://img.ixueyi.net/images/px_vc/2024-06/322/4BdzS8sxPR.png
4.国产密码算法

https://img.ixueyi.net/images/px_vc/2024-06/312/cK2th6dQ2V.png
5.数字证书
数字证书内容：证书的版本信息；证书的序列号，每个证书都有一个唯一的证书序列号；证书所使用的签名算法；证书的发行机构名称，命名规则一般采用X.500格式；证书的有效期，现在通用的证书一般采用UTC时间格式，它的计时范围为1950-2049；证书所有人的名称，命名规则一般采用X.500格式；证书所有人的公开密钥；证书发行者对证书的签名。

15.2 二、网络安全
开始学习
1.安全协议

https://img.ixueyi.net/images/px_vc/2024-06/290/UnKDaGkmF3.png
PGP（ Pretty Good Privacy ）：针对邮件和文件的混合加密系统。
SSL（ Secure Sockets Layer ）：工作在传输层至应用层。
TLS（ Transport Layer Security ）：传输层安全协议。
SET（ Secure Electronic Transaction ）：安全电子交易协议。电子商务，身份认证。普遍的说法是将其归为应用层。
IPsec（ Internet Protocol Security ）：对IP包加密。
2.防火墙
防火墙：隔离内网与外网，阻挡对网络的非法访问和不安全数据传递。
【应用层防火墙】效率低，安全性高
【网络层防火墙】效率高，安全性低
3.网络攻击
（1）分类
被动攻击：收集信息为主，破坏保密性。

https://img.ixueyi.net/images/px_vc/2024-06/456/yC2AR8ZFhK.png
主动攻击：主动攻击的类别主要有：中断（破坏可用性），篡改（破坏完整性），伪造（破坏真实性）

https://img.ixueyi.net/images/px_vc/2024-06/711/8NzGT4bGfc.png

15.3 三、信息系统安全体系
开始学习
1.安全保护等级
（1）用户自主保护级：适用于普通内联网用户
系统被破坏后，对公民、法人和其他组织权益有损害，但不损害国家安全社会秩序和公共利益。
（2）系统审计保护级：适用于通过内联网或国际网进行商务活动，需要保密的非重要单位
系统被破坏后，对公民、法人和其他组织权益有严重损害，或损害社会秩序和公共利益，但不损害国家安全。
（3）安全标记保护级：适用于地方各级国家机关、金融机构、邮电通信、能源与水源供给部门、交通运输、大型工商与信息技术企业、重点工程建设等单位
系统被破坏后，对社会秩序和公共利益造成严重损害，或对国家安全造成损害。
（4）结构化保护级：适用于中央级国家机关、广播电视部门、重要物资储备单位、社会应急服务部门、尖端科技企业集团、国家重点科研机构和国防建设等部门
系统被破坏后，对社会秩序和公共利益造成特别严重损害，或对国家安全造成严重损害。
（5）访问验证保护级：适用于国防关键部门和依法需要对计算机信息系统实施特殊隔离的单位
系统被破坏后，对国家安全造成特别严重损害。
2.系统安全分类
（1）实体安全。保护计算机设备、设施和其他媒体免遭地震、水灾、火灾、有害气体和其他环境事故（例如，电磁辐射等）破坏的措施和过程。
实体安全又可分为环境安全、设备安全和媒体安全三个方面。
（2）运行安全。运行安全包括系统风险管理、审计跟踪、备份与恢复、应急等四个方面的内容。运行安全是计算机信息系统安全的重要环节，其实质是保证系统的正常运行，不因偶然的或恶意的原因而遭到破坏，使系统可靠、连续地运行，服务不受中断。
（3）信息安全。信息安全是指防止系统中的信息被故意或偶然的非法授权访问、更改、破坏或使信息被非法系统识别和控制等。简单地说，信息安全就是确保信息的保密性、完整性、可用性和可控性。针对信息存在的形式和特点，信息安全可分为操作系统安全、数据库安全、网络安全、病毒防护、访问控制、数据加密和认证（鉴别）七个方面。
（4）人员安全。人员安全主要包括计算机使用人员的安全意识、法律意识和安全技能等。
3.系统安全体系结构
（1）物理环境的安全性。包括通信线路、物理设备和机房的安全等。防灾害能力、防干扰能力、设备的运行环境（温度、湿度、烟尘）属于此范畴。
（2）操作系统的安全性。主要表现在三个方面，一是操作系统本身的缺陷带来的不安全因素，主要包括身份认证、访问控制和系统漏洞等；二是对操作系统的安全配置问题；三是病毒对操作系统的威胁。
（3）网络的安全性。网络层的安全问题主要体现在计算机网络方面的安全性，包括网络层身份认证、网络资源的访问控制、数据传输的保密与完整性、远程接入的安全、域名系统的安全、路由系统的安全、入侵检测的手段和网络设施防病毒等。
（4）应用的安全性。由提供服务所采用的应用软件和数据的安全性产生，包括Web服务、电子邮件系统和DNS等。此外，还包括病毒对系统的威胁。
（5）管理的安全性。包括安全技术和设备的管理、安全管理制度、部门与人员的组织规则等。管理的制度化极大程度地影响着整个计算机网络的安全，严格的安全管理制度、明确的部门安全职责划分与合理的人员角色配置，都可以在很大程度上降低其他层次的安全漏洞。
4.安全体系结构
鉴别服务：用户名+口令；数字证书；生物特征识别【指纹、人脸、虹膜】
访问控制：自主访问控制（DAC）；访问控制列表（ACL）；强制访问控制（MAC）；基于角色的访问控制（RBAC）；基于任务的访问控制（TBAC）
数据完整性：
（1）阻止对媒体访问的机制：隔离，访问控制，路由控制
（2）探测非授权修改的机制：数字签名，数据重复，数字指纹，消息序列号
数据保密性：通过禁止访问【认证和授权】；通过【加密】
抗抵赖：数字签名

15.4 四、区块链技术
开始学习
1.概念
【区块链】 ≠ 比特币
比特币底层采用了区块链技术。但是比特币交易在我国定性为【非法运用】
2.特点
去中心化：由于使用分布式核算和存储，不存在中心化的硬件或管理机构，任意节点的权利和义务都是均等的，系统中数据块由整个系统具有维护功能的节点来共同维护。
开放性：系统是开放的，如：区块链上的【交易信息是公开的】，不过【账户身份信息是高度加密的】。
自治性：区块链采用基于协商一致的规范和协议（比如一套公开透明的算法）使得整个系统中的所有节点能够在去信任的环境自由安全的交换数据，使得对“人”的信任改成了对机器的信任，任何人为的干预不起作用。
安全性（信息不可篡改）：数据在多个结点存储了多份，篡改数据得改掉51%结点的数据，这太难。同时，还有其它安全机制，如：比特币的每笔交易，都由付款人用私钥签名，证明确实是他同意向某人付款，其它人无法伪造。
匿名性（去信任）：由于节点之间的交换遵循固定的算法，其数据交互是无需信任的（区块链中的程序规则会自行判断活动是否有效），因此交易对手无须通过公开身份的方式让对方自己产生信任，对信用的累积非常有帮助。
3.区块链技术
（1）去中心化
区块链是一个分布式账本，一种特殊的分布式数据库。
链表在多个结点存储，没有中心结点，数据不一致时，以“少数服从多数”原则执行。所以要篡改成功，除非篡改51%的结点。
（2）哈希加密/防篡改
区块链中每个区块会记录上一个区块的哈希值，使得篡改数据变得困难（篡改1个数据，涉及到多个区块的修改）。
（3）共识算法（博弈论）/全民记账
一般有：POW（工作量证明）、PoS（权益证明）、DPoS（股份授权证明机制）
比特币采用了POW（工作量证明）：争夺记账权 = 挖矿
